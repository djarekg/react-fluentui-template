// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client"
  previewFeatures = ["fullTextSearchPostgres"]
  output          = "../src/generated/prisma"
}

enum Gender {
  MALE
  FEMALE
  PERFERNOTTOSAY
}

enum Role {
  ADMIN
  USER
  SALES
  ACCOUNTING
}

enum Size {
  XSMALL
  SMALL
  MEDIUM
  LARGE
  XLARGE
  XXLARGE
  XXXLARGE
  ONESIZE
}

enum Color {
  BLACK
  BLUE
  BROWN
  CAMO
  CYAN
  GRAY
  GREEN
  MAGENTA
  ORANGE
  PINK
  PURPLE
  RED
  WHITE
  YELLOW
}

enum ProductType {
  DRESS
  HAT
  HOODIE
  JACKET
  PANTS
  SHIRT
  SHOES
  SHORTS
  SOCKS
  SWEATER
  UNDERWEAR
}

model State {
  id              String            @id @default(uuid())
  name            String
  code            String
  user            User[]
  customer        Customer[]
  customerContact CustomerContact[]
}

model User {
  id             String          @id @default(uuid())
  firstName      String
  lastName       String
  gender         Gender
  email          String          @unique
  streetAddress  String
  streetAddress2 String?
  city           String
  stateId        String
  zip            String
  phone          String
  isActive       Boolean         @default(false)
  dateCreated    DateTime        @default(now())
  state          State           @relation(fields: [stateId], references: [id])
  productSales   ProductSale[]
  userCredential UserCredential?
}

model UserCredential {
  id       String @id @default(uuid())
  userId   String @unique
  password String
  role     Role
  User     User   @relation(fields: [userId], references: [id])
}

model Customer {
  id              String            @id @default(uuid())
  name            String
  streetAddress   String
  streetAddress2  String?
  city            String
  stateId         String
  zip             String
  phone           String
  isActive        Boolean           @default(false)
  dateCreated     DateTime          @default(now())
  dateUpdated     DateTime          @updatedAt
  CustomerContact CustomerContact[]
  state           State             @relation(fields: [stateId], references: [id])
  productSales    ProductSale[]
}

model CustomerContact {
  id             String   @id @default(uuid())
  customerId     String
  firstName      String
  lastName       String
  email          String
  streetAddress  String
  streetAddress2 String?
  city           String
  stateId        String
  zip            String
  phone          String
  isActive       Boolean  @default(false)
  dateCreated    DateTime @default(now())
  dateUpdated    DateTime @updatedAt
  customer       Customer @relation(fields: [customerId], references: [id])
  state          State    @relation(fields: [stateId], references: [id])
}

model Product {
  id               String             @id @default(uuid())
  name             String
  description      String
  price            String
  genderId         String
  productType      ProductType
  isActive         Boolean            @default(false)
  dateCreated      DateTime           @default(now())
  dateUpdated      DateTime           @updatedAt
  productInventory ProductInventory[]
  productSales     ProductSale[]
  productColor     ProductColor[]
}

model ProductColor {
  id          String   @id @default(uuid())
  productId   String
  color       Color
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id])
}

model ProductInventory {
  id          String   @id @default(uuid())
  productId   String
  size        Size
  quantity    Int
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id])
}

model ProductSale {
  id          String   @id @default(uuid())
  productId   String
  customerId  String
  userId      String
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id])
  customer    Customer @relation(fields: [customerId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}
