
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProductColor` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ProductColor
 * 
 */
export type ProductColorModel = runtime.Types.Result.DefaultSelection<Prisma.$ProductColorPayload>

export type AggregateProductColor = {
  _count: ProductColorCountAggregateOutputType | null
  _min: ProductColorMinAggregateOutputType | null
  _max: ProductColorMaxAggregateOutputType | null
}

export type ProductColorMinAggregateOutputType = {
  id: string | null
  productId: string | null
  color: $Enums.Color | null
  dateCreated: Date | null
  dateUpdated: Date | null
}

export type ProductColorMaxAggregateOutputType = {
  id: string | null
  productId: string | null
  color: $Enums.Color | null
  dateCreated: Date | null
  dateUpdated: Date | null
}

export type ProductColorCountAggregateOutputType = {
  id: number
  productId: number
  color: number
  dateCreated: number
  dateUpdated: number
  _all: number
}


export type ProductColorMinAggregateInputType = {
  id?: true
  productId?: true
  color?: true
  dateCreated?: true
  dateUpdated?: true
}

export type ProductColorMaxAggregateInputType = {
  id?: true
  productId?: true
  color?: true
  dateCreated?: true
  dateUpdated?: true
}

export type ProductColorCountAggregateInputType = {
  id?: true
  productId?: true
  color?: true
  dateCreated?: true
  dateUpdated?: true
  _all?: true
}

export type ProductColorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductColor to aggregate.
   */
  where?: Prisma.ProductColorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductColors to fetch.
   */
  orderBy?: Prisma.ProductColorOrderByWithRelationInput | Prisma.ProductColorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProductColorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductColors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductColors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProductColors
  **/
  _count?: true | ProductColorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductColorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductColorMaxAggregateInputType
}

export type GetProductColorAggregateType<T extends ProductColorAggregateArgs> = {
      [P in keyof T & keyof AggregateProductColor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProductColor[P]>
    : Prisma.GetScalarType<T[P], AggregateProductColor[P]>
}




export type ProductColorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductColorWhereInput
  orderBy?: Prisma.ProductColorOrderByWithAggregationInput | Prisma.ProductColorOrderByWithAggregationInput[]
  by: Prisma.ProductColorScalarFieldEnum[] | Prisma.ProductColorScalarFieldEnum
  having?: Prisma.ProductColorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductColorCountAggregateInputType | true
  _min?: ProductColorMinAggregateInputType
  _max?: ProductColorMaxAggregateInputType
}

export type ProductColorGroupByOutputType = {
  id: string
  productId: string
  color: $Enums.Color
  dateCreated: Date
  dateUpdated: Date
  _count: ProductColorCountAggregateOutputType | null
  _min: ProductColorMinAggregateOutputType | null
  _max: ProductColorMaxAggregateOutputType | null
}

type GetProductColorGroupByPayload<T extends ProductColorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductColorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductColorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductColorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductColorGroupByOutputType[P]>
      }
    >
  >



export type ProductColorWhereInput = {
  AND?: Prisma.ProductColorWhereInput | Prisma.ProductColorWhereInput[]
  OR?: Prisma.ProductColorWhereInput[]
  NOT?: Prisma.ProductColorWhereInput | Prisma.ProductColorWhereInput[]
  id?: Prisma.StringFilter<"ProductColor"> | string
  productId?: Prisma.StringFilter<"ProductColor"> | string
  color?: Prisma.EnumColorFilter<"ProductColor"> | $Enums.Color
  dateCreated?: Prisma.DateTimeFilter<"ProductColor"> | Date | string
  dateUpdated?: Prisma.DateTimeFilter<"ProductColor"> | Date | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type ProductColorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  color?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
  product?: Prisma.ProductOrderByWithRelationInput
  _relevance?: Prisma.ProductColorOrderByRelevanceInput
}

export type ProductColorWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProductColorWhereInput | Prisma.ProductColorWhereInput[]
  OR?: Prisma.ProductColorWhereInput[]
  NOT?: Prisma.ProductColorWhereInput | Prisma.ProductColorWhereInput[]
  productId?: Prisma.StringFilter<"ProductColor"> | string
  color?: Prisma.EnumColorFilter<"ProductColor"> | $Enums.Color
  dateCreated?: Prisma.DateTimeFilter<"ProductColor"> | Date | string
  dateUpdated?: Prisma.DateTimeFilter<"ProductColor"> | Date | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id">

export type ProductColorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  color?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
  _count?: Prisma.ProductColorCountOrderByAggregateInput
  _max?: Prisma.ProductColorMaxOrderByAggregateInput
  _min?: Prisma.ProductColorMinOrderByAggregateInput
}

export type ProductColorScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProductColorScalarWhereWithAggregatesInput | Prisma.ProductColorScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProductColorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProductColorScalarWhereWithAggregatesInput | Prisma.ProductColorScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProductColor"> | string
  productId?: Prisma.StringWithAggregatesFilter<"ProductColor"> | string
  color?: Prisma.EnumColorWithAggregatesFilter<"ProductColor"> | $Enums.Color
  dateCreated?: Prisma.DateTimeWithAggregatesFilter<"ProductColor"> | Date | string
  dateUpdated?: Prisma.DateTimeWithAggregatesFilter<"ProductColor"> | Date | string
}

export type ProductColorCreateInput = {
  id?: string
  color: $Enums.Color
  dateCreated?: Date | string
  dateUpdated?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutProductColorInput
}

export type ProductColorUncheckedCreateInput = {
  id?: string
  productId: string
  color: $Enums.Color
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductColorUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.EnumColorFieldUpdateOperationsInput | $Enums.Color
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutProductColorNestedInput
}

export type ProductColorUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.EnumColorFieldUpdateOperationsInput | $Enums.Color
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductColorCreateManyInput = {
  id?: string
  productId: string
  color: $Enums.Color
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductColorUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.EnumColorFieldUpdateOperationsInput | $Enums.Color
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductColorUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.EnumColorFieldUpdateOperationsInput | $Enums.Color
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductColorListRelationFilter = {
  every?: Prisma.ProductColorWhereInput
  some?: Prisma.ProductColorWhereInput
  none?: Prisma.ProductColorWhereInput
}

export type ProductColorOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProductColorOrderByRelevanceInput = {
  fields: Prisma.ProductColorOrderByRelevanceFieldEnum | Prisma.ProductColorOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ProductColorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  color?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
}

export type ProductColorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  color?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
}

export type ProductColorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  color?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
}

export type ProductColorCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductColorCreateWithoutProductInput, Prisma.ProductColorUncheckedCreateWithoutProductInput> | Prisma.ProductColorCreateWithoutProductInput[] | Prisma.ProductColorUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductColorCreateOrConnectWithoutProductInput | Prisma.ProductColorCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductColorCreateManyProductInputEnvelope
  connect?: Prisma.ProductColorWhereUniqueInput | Prisma.ProductColorWhereUniqueInput[]
}

export type ProductColorUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductColorCreateWithoutProductInput, Prisma.ProductColorUncheckedCreateWithoutProductInput> | Prisma.ProductColorCreateWithoutProductInput[] | Prisma.ProductColorUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductColorCreateOrConnectWithoutProductInput | Prisma.ProductColorCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductColorCreateManyProductInputEnvelope
  connect?: Prisma.ProductColorWhereUniqueInput | Prisma.ProductColorWhereUniqueInput[]
}

export type ProductColorUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductColorCreateWithoutProductInput, Prisma.ProductColorUncheckedCreateWithoutProductInput> | Prisma.ProductColorCreateWithoutProductInput[] | Prisma.ProductColorUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductColorCreateOrConnectWithoutProductInput | Prisma.ProductColorCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductColorUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductColorUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductColorCreateManyProductInputEnvelope
  set?: Prisma.ProductColorWhereUniqueInput | Prisma.ProductColorWhereUniqueInput[]
  disconnect?: Prisma.ProductColorWhereUniqueInput | Prisma.ProductColorWhereUniqueInput[]
  delete?: Prisma.ProductColorWhereUniqueInput | Prisma.ProductColorWhereUniqueInput[]
  connect?: Prisma.ProductColorWhereUniqueInput | Prisma.ProductColorWhereUniqueInput[]
  update?: Prisma.ProductColorUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductColorUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductColorUpdateManyWithWhereWithoutProductInput | Prisma.ProductColorUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductColorScalarWhereInput | Prisma.ProductColorScalarWhereInput[]
}

export type ProductColorUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductColorCreateWithoutProductInput, Prisma.ProductColorUncheckedCreateWithoutProductInput> | Prisma.ProductColorCreateWithoutProductInput[] | Prisma.ProductColorUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductColorCreateOrConnectWithoutProductInput | Prisma.ProductColorCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductColorUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductColorUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductColorCreateManyProductInputEnvelope
  set?: Prisma.ProductColorWhereUniqueInput | Prisma.ProductColorWhereUniqueInput[]
  disconnect?: Prisma.ProductColorWhereUniqueInput | Prisma.ProductColorWhereUniqueInput[]
  delete?: Prisma.ProductColorWhereUniqueInput | Prisma.ProductColorWhereUniqueInput[]
  connect?: Prisma.ProductColorWhereUniqueInput | Prisma.ProductColorWhereUniqueInput[]
  update?: Prisma.ProductColorUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductColorUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductColorUpdateManyWithWhereWithoutProductInput | Prisma.ProductColorUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductColorScalarWhereInput | Prisma.ProductColorScalarWhereInput[]
}

export type EnumColorFieldUpdateOperationsInput = {
  set?: $Enums.Color
}

export type ProductColorCreateWithoutProductInput = {
  id?: string
  color: $Enums.Color
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductColorUncheckedCreateWithoutProductInput = {
  id?: string
  color: $Enums.Color
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductColorCreateOrConnectWithoutProductInput = {
  where: Prisma.ProductColorWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductColorCreateWithoutProductInput, Prisma.ProductColorUncheckedCreateWithoutProductInput>
}

export type ProductColorCreateManyProductInputEnvelope = {
  data: Prisma.ProductColorCreateManyProductInput | Prisma.ProductColorCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type ProductColorUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductColorWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductColorUpdateWithoutProductInput, Prisma.ProductColorUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.ProductColorCreateWithoutProductInput, Prisma.ProductColorUncheckedCreateWithoutProductInput>
}

export type ProductColorUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductColorWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductColorUpdateWithoutProductInput, Prisma.ProductColorUncheckedUpdateWithoutProductInput>
}

export type ProductColorUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.ProductColorScalarWhereInput
  data: Prisma.XOR<Prisma.ProductColorUpdateManyMutationInput, Prisma.ProductColorUncheckedUpdateManyWithoutProductInput>
}

export type ProductColorScalarWhereInput = {
  AND?: Prisma.ProductColorScalarWhereInput | Prisma.ProductColorScalarWhereInput[]
  OR?: Prisma.ProductColorScalarWhereInput[]
  NOT?: Prisma.ProductColorScalarWhereInput | Prisma.ProductColorScalarWhereInput[]
  id?: Prisma.StringFilter<"ProductColor"> | string
  productId?: Prisma.StringFilter<"ProductColor"> | string
  color?: Prisma.EnumColorFilter<"ProductColor"> | $Enums.Color
  dateCreated?: Prisma.DateTimeFilter<"ProductColor"> | Date | string
  dateUpdated?: Prisma.DateTimeFilter<"ProductColor"> | Date | string
}

export type ProductColorCreateManyProductInput = {
  id?: string
  color: $Enums.Color
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductColorUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.EnumColorFieldUpdateOperationsInput | $Enums.Color
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductColorUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.EnumColorFieldUpdateOperationsInput | $Enums.Color
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductColorUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  color?: Prisma.EnumColorFieldUpdateOperationsInput | $Enums.Color
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProductColorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  color?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productColor"]>

export type ProductColorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  color?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productColor"]>

export type ProductColorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  color?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productColor"]>

export type ProductColorSelectScalar = {
  id?: boolean
  productId?: boolean
  color?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
}

export type ProductColorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId" | "color" | "dateCreated" | "dateUpdated", ExtArgs["result"]["productColor"]>
export type ProductColorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ProductColorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ProductColorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $ProductColorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProductColor"
  objects: {
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    productId: string
    color: $Enums.Color
    dateCreated: Date
    dateUpdated: Date
  }, ExtArgs["result"]["productColor"]>
  composites: {}
}

export type ProductColorGetPayload<S extends boolean | null | undefined | ProductColorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProductColorPayload, S>

export type ProductColorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProductColorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductColorCountAggregateInputType | true
  }

export interface ProductColorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductColor'], meta: { name: 'ProductColor' } }
  /**
   * Find zero or one ProductColor that matches the filter.
   * @param {ProductColorFindUniqueArgs} args - Arguments to find a ProductColor
   * @example
   * // Get one ProductColor
   * const productColor = await prisma.productColor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProductColorFindUniqueArgs>(args: Prisma.SelectSubset<T, ProductColorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProductColorClient<runtime.Types.Result.GetResult<Prisma.$ProductColorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProductColor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProductColorFindUniqueOrThrowArgs} args - Arguments to find a ProductColor
   * @example
   * // Get one ProductColor
   * const productColor = await prisma.productColor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProductColorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProductColorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductColorClient<runtime.Types.Result.GetResult<Prisma.$ProductColorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductColor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductColorFindFirstArgs} args - Arguments to find a ProductColor
   * @example
   * // Get one ProductColor
   * const productColor = await prisma.productColor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProductColorFindFirstArgs>(args?: Prisma.SelectSubset<T, ProductColorFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProductColorClient<runtime.Types.Result.GetResult<Prisma.$ProductColorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductColor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductColorFindFirstOrThrowArgs} args - Arguments to find a ProductColor
   * @example
   * // Get one ProductColor
   * const productColor = await prisma.productColor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProductColorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProductColorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductColorClient<runtime.Types.Result.GetResult<Prisma.$ProductColorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProductColors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductColorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProductColors
   * const productColors = await prisma.productColor.findMany()
   * 
   * // Get first 10 ProductColors
   * const productColors = await prisma.productColor.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productColorWithIdOnly = await prisma.productColor.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProductColorFindManyArgs>(args?: Prisma.SelectSubset<T, ProductColorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductColorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProductColor.
   * @param {ProductColorCreateArgs} args - Arguments to create a ProductColor.
   * @example
   * // Create one ProductColor
   * const ProductColor = await prisma.productColor.create({
   *   data: {
   *     // ... data to create a ProductColor
   *   }
   * })
   * 
   */
  create<T extends ProductColorCreateArgs>(args: Prisma.SelectSubset<T, ProductColorCreateArgs<ExtArgs>>): Prisma.Prisma__ProductColorClient<runtime.Types.Result.GetResult<Prisma.$ProductColorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProductColors.
   * @param {ProductColorCreateManyArgs} args - Arguments to create many ProductColors.
   * @example
   * // Create many ProductColors
   * const productColor = await prisma.productColor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProductColorCreateManyArgs>(args?: Prisma.SelectSubset<T, ProductColorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProductColors and returns the data saved in the database.
   * @param {ProductColorCreateManyAndReturnArgs} args - Arguments to create many ProductColors.
   * @example
   * // Create many ProductColors
   * const productColor = await prisma.productColor.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProductColors and only return the `id`
   * const productColorWithIdOnly = await prisma.productColor.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProductColorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProductColorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductColorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProductColor.
   * @param {ProductColorDeleteArgs} args - Arguments to delete one ProductColor.
   * @example
   * // Delete one ProductColor
   * const ProductColor = await prisma.productColor.delete({
   *   where: {
   *     // ... filter to delete one ProductColor
   *   }
   * })
   * 
   */
  delete<T extends ProductColorDeleteArgs>(args: Prisma.SelectSubset<T, ProductColorDeleteArgs<ExtArgs>>): Prisma.Prisma__ProductColorClient<runtime.Types.Result.GetResult<Prisma.$ProductColorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProductColor.
   * @param {ProductColorUpdateArgs} args - Arguments to update one ProductColor.
   * @example
   * // Update one ProductColor
   * const productColor = await prisma.productColor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProductColorUpdateArgs>(args: Prisma.SelectSubset<T, ProductColorUpdateArgs<ExtArgs>>): Prisma.Prisma__ProductColorClient<runtime.Types.Result.GetResult<Prisma.$ProductColorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProductColors.
   * @param {ProductColorDeleteManyArgs} args - Arguments to filter ProductColors to delete.
   * @example
   * // Delete a few ProductColors
   * const { count } = await prisma.productColor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProductColorDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProductColorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductColors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductColorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProductColors
   * const productColor = await prisma.productColor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProductColorUpdateManyArgs>(args: Prisma.SelectSubset<T, ProductColorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductColors and returns the data updated in the database.
   * @param {ProductColorUpdateManyAndReturnArgs} args - Arguments to update many ProductColors.
   * @example
   * // Update many ProductColors
   * const productColor = await prisma.productColor.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProductColors and only return the `id`
   * const productColorWithIdOnly = await prisma.productColor.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProductColorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProductColorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductColorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProductColor.
   * @param {ProductColorUpsertArgs} args - Arguments to update or create a ProductColor.
   * @example
   * // Update or create a ProductColor
   * const productColor = await prisma.productColor.upsert({
   *   create: {
   *     // ... data to create a ProductColor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProductColor we want to update
   *   }
   * })
   */
  upsert<T extends ProductColorUpsertArgs>(args: Prisma.SelectSubset<T, ProductColorUpsertArgs<ExtArgs>>): Prisma.Prisma__ProductColorClient<runtime.Types.Result.GetResult<Prisma.$ProductColorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProductColors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductColorCountArgs} args - Arguments to filter ProductColors to count.
   * @example
   * // Count the number of ProductColors
   * const count = await prisma.productColor.count({
   *   where: {
   *     // ... the filter for the ProductColors we want to count
   *   }
   * })
  **/
  count<T extends ProductColorCountArgs>(
    args?: Prisma.Subset<T, ProductColorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductColorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProductColor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductColorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductColorAggregateArgs>(args: Prisma.Subset<T, ProductColorAggregateArgs>): Prisma.PrismaPromise<GetProductColorAggregateType<T>>

  /**
   * Group by ProductColor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductColorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProductColorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProductColorGroupByArgs['orderBy'] }
      : { orderBy?: ProductColorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProductColorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductColorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProductColor model
 */
readonly fields: ProductColorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProductColor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProductColorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProductColor model
 */
export interface ProductColorFieldRefs {
  readonly id: Prisma.FieldRef<"ProductColor", 'String'>
  readonly productId: Prisma.FieldRef<"ProductColor", 'String'>
  readonly color: Prisma.FieldRef<"ProductColor", 'Color'>
  readonly dateCreated: Prisma.FieldRef<"ProductColor", 'DateTime'>
  readonly dateUpdated: Prisma.FieldRef<"ProductColor", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProductColor findUnique
 */
export type ProductColorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductColor
   */
  select?: Prisma.ProductColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductColor
   */
  omit?: Prisma.ProductColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductColorInclude<ExtArgs> | null
  /**
   * Filter, which ProductColor to fetch.
   */
  where: Prisma.ProductColorWhereUniqueInput
}

/**
 * ProductColor findUniqueOrThrow
 */
export type ProductColorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductColor
   */
  select?: Prisma.ProductColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductColor
   */
  omit?: Prisma.ProductColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductColorInclude<ExtArgs> | null
  /**
   * Filter, which ProductColor to fetch.
   */
  where: Prisma.ProductColorWhereUniqueInput
}

/**
 * ProductColor findFirst
 */
export type ProductColorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductColor
   */
  select?: Prisma.ProductColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductColor
   */
  omit?: Prisma.ProductColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductColorInclude<ExtArgs> | null
  /**
   * Filter, which ProductColor to fetch.
   */
  where?: Prisma.ProductColorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductColors to fetch.
   */
  orderBy?: Prisma.ProductColorOrderByWithRelationInput | Prisma.ProductColorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductColors.
   */
  cursor?: Prisma.ProductColorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductColors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductColors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductColors.
   */
  distinct?: Prisma.ProductColorScalarFieldEnum | Prisma.ProductColorScalarFieldEnum[]
}

/**
 * ProductColor findFirstOrThrow
 */
export type ProductColorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductColor
   */
  select?: Prisma.ProductColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductColor
   */
  omit?: Prisma.ProductColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductColorInclude<ExtArgs> | null
  /**
   * Filter, which ProductColor to fetch.
   */
  where?: Prisma.ProductColorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductColors to fetch.
   */
  orderBy?: Prisma.ProductColorOrderByWithRelationInput | Prisma.ProductColorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductColors.
   */
  cursor?: Prisma.ProductColorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductColors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductColors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductColors.
   */
  distinct?: Prisma.ProductColorScalarFieldEnum | Prisma.ProductColorScalarFieldEnum[]
}

/**
 * ProductColor findMany
 */
export type ProductColorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductColor
   */
  select?: Prisma.ProductColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductColor
   */
  omit?: Prisma.ProductColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductColorInclude<ExtArgs> | null
  /**
   * Filter, which ProductColors to fetch.
   */
  where?: Prisma.ProductColorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductColors to fetch.
   */
  orderBy?: Prisma.ProductColorOrderByWithRelationInput | Prisma.ProductColorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProductColors.
   */
  cursor?: Prisma.ProductColorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductColors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductColors.
   */
  skip?: number
  distinct?: Prisma.ProductColorScalarFieldEnum | Prisma.ProductColorScalarFieldEnum[]
}

/**
 * ProductColor create
 */
export type ProductColorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductColor
   */
  select?: Prisma.ProductColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductColor
   */
  omit?: Prisma.ProductColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductColorInclude<ExtArgs> | null
  /**
   * The data needed to create a ProductColor.
   */
  data: Prisma.XOR<Prisma.ProductColorCreateInput, Prisma.ProductColorUncheckedCreateInput>
}

/**
 * ProductColor createMany
 */
export type ProductColorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProductColors.
   */
  data: Prisma.ProductColorCreateManyInput | Prisma.ProductColorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProductColor createManyAndReturn
 */
export type ProductColorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductColor
   */
  select?: Prisma.ProductColorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductColor
   */
  omit?: Prisma.ProductColorOmit<ExtArgs> | null
  /**
   * The data used to create many ProductColors.
   */
  data: Prisma.ProductColorCreateManyInput | Prisma.ProductColorCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductColorIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProductColor update
 */
export type ProductColorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductColor
   */
  select?: Prisma.ProductColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductColor
   */
  omit?: Prisma.ProductColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductColorInclude<ExtArgs> | null
  /**
   * The data needed to update a ProductColor.
   */
  data: Prisma.XOR<Prisma.ProductColorUpdateInput, Prisma.ProductColorUncheckedUpdateInput>
  /**
   * Choose, which ProductColor to update.
   */
  where: Prisma.ProductColorWhereUniqueInput
}

/**
 * ProductColor updateMany
 */
export type ProductColorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProductColors.
   */
  data: Prisma.XOR<Prisma.ProductColorUpdateManyMutationInput, Prisma.ProductColorUncheckedUpdateManyInput>
  /**
   * Filter which ProductColors to update
   */
  where?: Prisma.ProductColorWhereInput
  /**
   * Limit how many ProductColors to update.
   */
  limit?: number
}

/**
 * ProductColor updateManyAndReturn
 */
export type ProductColorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductColor
   */
  select?: Prisma.ProductColorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductColor
   */
  omit?: Prisma.ProductColorOmit<ExtArgs> | null
  /**
   * The data used to update ProductColors.
   */
  data: Prisma.XOR<Prisma.ProductColorUpdateManyMutationInput, Prisma.ProductColorUncheckedUpdateManyInput>
  /**
   * Filter which ProductColors to update
   */
  where?: Prisma.ProductColorWhereInput
  /**
   * Limit how many ProductColors to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductColorIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProductColor upsert
 */
export type ProductColorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductColor
   */
  select?: Prisma.ProductColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductColor
   */
  omit?: Prisma.ProductColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductColorInclude<ExtArgs> | null
  /**
   * The filter to search for the ProductColor to update in case it exists.
   */
  where: Prisma.ProductColorWhereUniqueInput
  /**
   * In case the ProductColor found by the `where` argument doesn't exist, create a new ProductColor with this data.
   */
  create: Prisma.XOR<Prisma.ProductColorCreateInput, Prisma.ProductColorUncheckedCreateInput>
  /**
   * In case the ProductColor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProductColorUpdateInput, Prisma.ProductColorUncheckedUpdateInput>
}

/**
 * ProductColor delete
 */
export type ProductColorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductColor
   */
  select?: Prisma.ProductColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductColor
   */
  omit?: Prisma.ProductColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductColorInclude<ExtArgs> | null
  /**
   * Filter which ProductColor to delete.
   */
  where: Prisma.ProductColorWhereUniqueInput
}

/**
 * ProductColor deleteMany
 */
export type ProductColorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductColors to delete
   */
  where?: Prisma.ProductColorWhereInput
  /**
   * Limit how many ProductColors to delete.
   */
  limit?: number
}

/**
 * ProductColor without action
 */
export type ProductColorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductColor
   */
  select?: Prisma.ProductColorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductColor
   */
  omit?: Prisma.ProductColorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductColorInclude<ExtArgs> | null
}
