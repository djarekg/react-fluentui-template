
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProductInventory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ProductInventory
 * 
 */
export type ProductInventoryModel = runtime.Types.Result.DefaultSelection<Prisma.$ProductInventoryPayload>

export type AggregateProductInventory = {
  _count: ProductInventoryCountAggregateOutputType | null
  _avg: ProductInventoryAvgAggregateOutputType | null
  _sum: ProductInventorySumAggregateOutputType | null
  _min: ProductInventoryMinAggregateOutputType | null
  _max: ProductInventoryMaxAggregateOutputType | null
}

export type ProductInventoryAvgAggregateOutputType = {
  quantity: number | null
}

export type ProductInventorySumAggregateOutputType = {
  quantity: number | null
}

export type ProductInventoryMinAggregateOutputType = {
  id: string | null
  productId: string | null
  size: $Enums.Size | null
  quantity: number | null
  dateCreated: Date | null
  dateUpdated: Date | null
}

export type ProductInventoryMaxAggregateOutputType = {
  id: string | null
  productId: string | null
  size: $Enums.Size | null
  quantity: number | null
  dateCreated: Date | null
  dateUpdated: Date | null
}

export type ProductInventoryCountAggregateOutputType = {
  id: number
  productId: number
  size: number
  quantity: number
  dateCreated: number
  dateUpdated: number
  _all: number
}


export type ProductInventoryAvgAggregateInputType = {
  quantity?: true
}

export type ProductInventorySumAggregateInputType = {
  quantity?: true
}

export type ProductInventoryMinAggregateInputType = {
  id?: true
  productId?: true
  size?: true
  quantity?: true
  dateCreated?: true
  dateUpdated?: true
}

export type ProductInventoryMaxAggregateInputType = {
  id?: true
  productId?: true
  size?: true
  quantity?: true
  dateCreated?: true
  dateUpdated?: true
}

export type ProductInventoryCountAggregateInputType = {
  id?: true
  productId?: true
  size?: true
  quantity?: true
  dateCreated?: true
  dateUpdated?: true
  _all?: true
}

export type ProductInventoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductInventory to aggregate.
   */
  where?: Prisma.ProductInventoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductInventories to fetch.
   */
  orderBy?: Prisma.ProductInventoryOrderByWithRelationInput | Prisma.ProductInventoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProductInventoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductInventories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductInventories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProductInventories
  **/
  _count?: true | ProductInventoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductInventoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductInventorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductInventoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductInventoryMaxAggregateInputType
}

export type GetProductInventoryAggregateType<T extends ProductInventoryAggregateArgs> = {
      [P in keyof T & keyof AggregateProductInventory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProductInventory[P]>
    : Prisma.GetScalarType<T[P], AggregateProductInventory[P]>
}




export type ProductInventoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductInventoryWhereInput
  orderBy?: Prisma.ProductInventoryOrderByWithAggregationInput | Prisma.ProductInventoryOrderByWithAggregationInput[]
  by: Prisma.ProductInventoryScalarFieldEnum[] | Prisma.ProductInventoryScalarFieldEnum
  having?: Prisma.ProductInventoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductInventoryCountAggregateInputType | true
  _avg?: ProductInventoryAvgAggregateInputType
  _sum?: ProductInventorySumAggregateInputType
  _min?: ProductInventoryMinAggregateInputType
  _max?: ProductInventoryMaxAggregateInputType
}

export type ProductInventoryGroupByOutputType = {
  id: string
  productId: string
  size: $Enums.Size
  quantity: number
  dateCreated: Date
  dateUpdated: Date
  _count: ProductInventoryCountAggregateOutputType | null
  _avg: ProductInventoryAvgAggregateOutputType | null
  _sum: ProductInventorySumAggregateOutputType | null
  _min: ProductInventoryMinAggregateOutputType | null
  _max: ProductInventoryMaxAggregateOutputType | null
}

type GetProductInventoryGroupByPayload<T extends ProductInventoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductInventoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductInventoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductInventoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductInventoryGroupByOutputType[P]>
      }
    >
  >



export type ProductInventoryWhereInput = {
  AND?: Prisma.ProductInventoryWhereInput | Prisma.ProductInventoryWhereInput[]
  OR?: Prisma.ProductInventoryWhereInput[]
  NOT?: Prisma.ProductInventoryWhereInput | Prisma.ProductInventoryWhereInput[]
  id?: Prisma.StringFilter<"ProductInventory"> | string
  productId?: Prisma.StringFilter<"ProductInventory"> | string
  size?: Prisma.EnumSizeFilter<"ProductInventory"> | $Enums.Size
  quantity?: Prisma.IntFilter<"ProductInventory"> | number
  dateCreated?: Prisma.DateTimeFilter<"ProductInventory"> | Date | string
  dateUpdated?: Prisma.DateTimeFilter<"ProductInventory"> | Date | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type ProductInventoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  size?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
  product?: Prisma.ProductOrderByWithRelationInput
  _relevance?: Prisma.ProductInventoryOrderByRelevanceInput
}

export type ProductInventoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProductInventoryWhereInput | Prisma.ProductInventoryWhereInput[]
  OR?: Prisma.ProductInventoryWhereInput[]
  NOT?: Prisma.ProductInventoryWhereInput | Prisma.ProductInventoryWhereInput[]
  productId?: Prisma.StringFilter<"ProductInventory"> | string
  size?: Prisma.EnumSizeFilter<"ProductInventory"> | $Enums.Size
  quantity?: Prisma.IntFilter<"ProductInventory"> | number
  dateCreated?: Prisma.DateTimeFilter<"ProductInventory"> | Date | string
  dateUpdated?: Prisma.DateTimeFilter<"ProductInventory"> | Date | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id">

export type ProductInventoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  size?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
  _count?: Prisma.ProductInventoryCountOrderByAggregateInput
  _avg?: Prisma.ProductInventoryAvgOrderByAggregateInput
  _max?: Prisma.ProductInventoryMaxOrderByAggregateInput
  _min?: Prisma.ProductInventoryMinOrderByAggregateInput
  _sum?: Prisma.ProductInventorySumOrderByAggregateInput
}

export type ProductInventoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProductInventoryScalarWhereWithAggregatesInput | Prisma.ProductInventoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProductInventoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProductInventoryScalarWhereWithAggregatesInput | Prisma.ProductInventoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProductInventory"> | string
  productId?: Prisma.StringWithAggregatesFilter<"ProductInventory"> | string
  size?: Prisma.EnumSizeWithAggregatesFilter<"ProductInventory"> | $Enums.Size
  quantity?: Prisma.IntWithAggregatesFilter<"ProductInventory"> | number
  dateCreated?: Prisma.DateTimeWithAggregatesFilter<"ProductInventory"> | Date | string
  dateUpdated?: Prisma.DateTimeWithAggregatesFilter<"ProductInventory"> | Date | string
}

export type ProductInventoryCreateInput = {
  id?: string
  size: $Enums.Size
  quantity: number
  dateCreated?: Date | string
  dateUpdated?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutProductInventoryInput
}

export type ProductInventoryUncheckedCreateInput = {
  id?: string
  productId: string
  size: $Enums.Size
  quantity: number
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductInventoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.EnumSizeFieldUpdateOperationsInput | $Enums.Size
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutProductInventoryNestedInput
}

export type ProductInventoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.EnumSizeFieldUpdateOperationsInput | $Enums.Size
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductInventoryCreateManyInput = {
  id?: string
  productId: string
  size: $Enums.Size
  quantity: number
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductInventoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.EnumSizeFieldUpdateOperationsInput | $Enums.Size
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductInventoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.EnumSizeFieldUpdateOperationsInput | $Enums.Size
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductInventoryListRelationFilter = {
  every?: Prisma.ProductInventoryWhereInput
  some?: Prisma.ProductInventoryWhereInput
  none?: Prisma.ProductInventoryWhereInput
}

export type ProductInventoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProductInventoryOrderByRelevanceInput = {
  fields: Prisma.ProductInventoryOrderByRelevanceFieldEnum | Prisma.ProductInventoryOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ProductInventoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  size?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
}

export type ProductInventoryAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type ProductInventoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  size?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
}

export type ProductInventoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  size?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
}

export type ProductInventorySumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type ProductInventoryCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductInventoryCreateWithoutProductInput, Prisma.ProductInventoryUncheckedCreateWithoutProductInput> | Prisma.ProductInventoryCreateWithoutProductInput[] | Prisma.ProductInventoryUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductInventoryCreateOrConnectWithoutProductInput | Prisma.ProductInventoryCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductInventoryCreateManyProductInputEnvelope
  connect?: Prisma.ProductInventoryWhereUniqueInput | Prisma.ProductInventoryWhereUniqueInput[]
}

export type ProductInventoryUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductInventoryCreateWithoutProductInput, Prisma.ProductInventoryUncheckedCreateWithoutProductInput> | Prisma.ProductInventoryCreateWithoutProductInput[] | Prisma.ProductInventoryUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductInventoryCreateOrConnectWithoutProductInput | Prisma.ProductInventoryCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductInventoryCreateManyProductInputEnvelope
  connect?: Prisma.ProductInventoryWhereUniqueInput | Prisma.ProductInventoryWhereUniqueInput[]
}

export type ProductInventoryUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductInventoryCreateWithoutProductInput, Prisma.ProductInventoryUncheckedCreateWithoutProductInput> | Prisma.ProductInventoryCreateWithoutProductInput[] | Prisma.ProductInventoryUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductInventoryCreateOrConnectWithoutProductInput | Prisma.ProductInventoryCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductInventoryUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductInventoryUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductInventoryCreateManyProductInputEnvelope
  set?: Prisma.ProductInventoryWhereUniqueInput | Prisma.ProductInventoryWhereUniqueInput[]
  disconnect?: Prisma.ProductInventoryWhereUniqueInput | Prisma.ProductInventoryWhereUniqueInput[]
  delete?: Prisma.ProductInventoryWhereUniqueInput | Prisma.ProductInventoryWhereUniqueInput[]
  connect?: Prisma.ProductInventoryWhereUniqueInput | Prisma.ProductInventoryWhereUniqueInput[]
  update?: Prisma.ProductInventoryUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductInventoryUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductInventoryUpdateManyWithWhereWithoutProductInput | Prisma.ProductInventoryUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductInventoryScalarWhereInput | Prisma.ProductInventoryScalarWhereInput[]
}

export type ProductInventoryUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductInventoryCreateWithoutProductInput, Prisma.ProductInventoryUncheckedCreateWithoutProductInput> | Prisma.ProductInventoryCreateWithoutProductInput[] | Prisma.ProductInventoryUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductInventoryCreateOrConnectWithoutProductInput | Prisma.ProductInventoryCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductInventoryUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductInventoryUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductInventoryCreateManyProductInputEnvelope
  set?: Prisma.ProductInventoryWhereUniqueInput | Prisma.ProductInventoryWhereUniqueInput[]
  disconnect?: Prisma.ProductInventoryWhereUniqueInput | Prisma.ProductInventoryWhereUniqueInput[]
  delete?: Prisma.ProductInventoryWhereUniqueInput | Prisma.ProductInventoryWhereUniqueInput[]
  connect?: Prisma.ProductInventoryWhereUniqueInput | Prisma.ProductInventoryWhereUniqueInput[]
  update?: Prisma.ProductInventoryUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductInventoryUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductInventoryUpdateManyWithWhereWithoutProductInput | Prisma.ProductInventoryUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductInventoryScalarWhereInput | Prisma.ProductInventoryScalarWhereInput[]
}

export type EnumSizeFieldUpdateOperationsInput = {
  set?: $Enums.Size
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ProductInventoryCreateWithoutProductInput = {
  id?: string
  size: $Enums.Size
  quantity: number
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductInventoryUncheckedCreateWithoutProductInput = {
  id?: string
  size: $Enums.Size
  quantity: number
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductInventoryCreateOrConnectWithoutProductInput = {
  where: Prisma.ProductInventoryWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductInventoryCreateWithoutProductInput, Prisma.ProductInventoryUncheckedCreateWithoutProductInput>
}

export type ProductInventoryCreateManyProductInputEnvelope = {
  data: Prisma.ProductInventoryCreateManyProductInput | Prisma.ProductInventoryCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type ProductInventoryUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductInventoryWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductInventoryUpdateWithoutProductInput, Prisma.ProductInventoryUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.ProductInventoryCreateWithoutProductInput, Prisma.ProductInventoryUncheckedCreateWithoutProductInput>
}

export type ProductInventoryUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductInventoryWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductInventoryUpdateWithoutProductInput, Prisma.ProductInventoryUncheckedUpdateWithoutProductInput>
}

export type ProductInventoryUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.ProductInventoryScalarWhereInput
  data: Prisma.XOR<Prisma.ProductInventoryUpdateManyMutationInput, Prisma.ProductInventoryUncheckedUpdateManyWithoutProductInput>
}

export type ProductInventoryScalarWhereInput = {
  AND?: Prisma.ProductInventoryScalarWhereInput | Prisma.ProductInventoryScalarWhereInput[]
  OR?: Prisma.ProductInventoryScalarWhereInput[]
  NOT?: Prisma.ProductInventoryScalarWhereInput | Prisma.ProductInventoryScalarWhereInput[]
  id?: Prisma.StringFilter<"ProductInventory"> | string
  productId?: Prisma.StringFilter<"ProductInventory"> | string
  size?: Prisma.EnumSizeFilter<"ProductInventory"> | $Enums.Size
  quantity?: Prisma.IntFilter<"ProductInventory"> | number
  dateCreated?: Prisma.DateTimeFilter<"ProductInventory"> | Date | string
  dateUpdated?: Prisma.DateTimeFilter<"ProductInventory"> | Date | string
}

export type ProductInventoryCreateManyProductInput = {
  id?: string
  size: $Enums.Size
  quantity: number
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductInventoryUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.EnumSizeFieldUpdateOperationsInput | $Enums.Size
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductInventoryUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.EnumSizeFieldUpdateOperationsInput | $Enums.Size
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductInventoryUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.EnumSizeFieldUpdateOperationsInput | $Enums.Size
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProductInventorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  size?: boolean
  quantity?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productInventory"]>

export type ProductInventorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  size?: boolean
  quantity?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productInventory"]>

export type ProductInventorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  size?: boolean
  quantity?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productInventory"]>

export type ProductInventorySelectScalar = {
  id?: boolean
  productId?: boolean
  size?: boolean
  quantity?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
}

export type ProductInventoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId" | "size" | "quantity" | "dateCreated" | "dateUpdated", ExtArgs["result"]["productInventory"]>
export type ProductInventoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ProductInventoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ProductInventoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $ProductInventoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProductInventory"
  objects: {
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    productId: string
    size: $Enums.Size
    quantity: number
    dateCreated: Date
    dateUpdated: Date
  }, ExtArgs["result"]["productInventory"]>
  composites: {}
}

export type ProductInventoryGetPayload<S extends boolean | null | undefined | ProductInventoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProductInventoryPayload, S>

export type ProductInventoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProductInventoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductInventoryCountAggregateInputType | true
  }

export interface ProductInventoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductInventory'], meta: { name: 'ProductInventory' } }
  /**
   * Find zero or one ProductInventory that matches the filter.
   * @param {ProductInventoryFindUniqueArgs} args - Arguments to find a ProductInventory
   * @example
   * // Get one ProductInventory
   * const productInventory = await prisma.productInventory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProductInventoryFindUniqueArgs>(args: Prisma.SelectSubset<T, ProductInventoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProductInventoryClient<runtime.Types.Result.GetResult<Prisma.$ProductInventoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProductInventory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProductInventoryFindUniqueOrThrowArgs} args - Arguments to find a ProductInventory
   * @example
   * // Get one ProductInventory
   * const productInventory = await prisma.productInventory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProductInventoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProductInventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductInventoryClient<runtime.Types.Result.GetResult<Prisma.$ProductInventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductInventory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductInventoryFindFirstArgs} args - Arguments to find a ProductInventory
   * @example
   * // Get one ProductInventory
   * const productInventory = await prisma.productInventory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProductInventoryFindFirstArgs>(args?: Prisma.SelectSubset<T, ProductInventoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProductInventoryClient<runtime.Types.Result.GetResult<Prisma.$ProductInventoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductInventory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductInventoryFindFirstOrThrowArgs} args - Arguments to find a ProductInventory
   * @example
   * // Get one ProductInventory
   * const productInventory = await prisma.productInventory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProductInventoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProductInventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductInventoryClient<runtime.Types.Result.GetResult<Prisma.$ProductInventoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProductInventories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductInventoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProductInventories
   * const productInventories = await prisma.productInventory.findMany()
   * 
   * // Get first 10 ProductInventories
   * const productInventories = await prisma.productInventory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productInventoryWithIdOnly = await prisma.productInventory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProductInventoryFindManyArgs>(args?: Prisma.SelectSubset<T, ProductInventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductInventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProductInventory.
   * @param {ProductInventoryCreateArgs} args - Arguments to create a ProductInventory.
   * @example
   * // Create one ProductInventory
   * const ProductInventory = await prisma.productInventory.create({
   *   data: {
   *     // ... data to create a ProductInventory
   *   }
   * })
   * 
   */
  create<T extends ProductInventoryCreateArgs>(args: Prisma.SelectSubset<T, ProductInventoryCreateArgs<ExtArgs>>): Prisma.Prisma__ProductInventoryClient<runtime.Types.Result.GetResult<Prisma.$ProductInventoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProductInventories.
   * @param {ProductInventoryCreateManyArgs} args - Arguments to create many ProductInventories.
   * @example
   * // Create many ProductInventories
   * const productInventory = await prisma.productInventory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProductInventoryCreateManyArgs>(args?: Prisma.SelectSubset<T, ProductInventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProductInventories and returns the data saved in the database.
   * @param {ProductInventoryCreateManyAndReturnArgs} args - Arguments to create many ProductInventories.
   * @example
   * // Create many ProductInventories
   * const productInventory = await prisma.productInventory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProductInventories and only return the `id`
   * const productInventoryWithIdOnly = await prisma.productInventory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProductInventoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProductInventoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductInventoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProductInventory.
   * @param {ProductInventoryDeleteArgs} args - Arguments to delete one ProductInventory.
   * @example
   * // Delete one ProductInventory
   * const ProductInventory = await prisma.productInventory.delete({
   *   where: {
   *     // ... filter to delete one ProductInventory
   *   }
   * })
   * 
   */
  delete<T extends ProductInventoryDeleteArgs>(args: Prisma.SelectSubset<T, ProductInventoryDeleteArgs<ExtArgs>>): Prisma.Prisma__ProductInventoryClient<runtime.Types.Result.GetResult<Prisma.$ProductInventoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProductInventory.
   * @param {ProductInventoryUpdateArgs} args - Arguments to update one ProductInventory.
   * @example
   * // Update one ProductInventory
   * const productInventory = await prisma.productInventory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProductInventoryUpdateArgs>(args: Prisma.SelectSubset<T, ProductInventoryUpdateArgs<ExtArgs>>): Prisma.Prisma__ProductInventoryClient<runtime.Types.Result.GetResult<Prisma.$ProductInventoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProductInventories.
   * @param {ProductInventoryDeleteManyArgs} args - Arguments to filter ProductInventories to delete.
   * @example
   * // Delete a few ProductInventories
   * const { count } = await prisma.productInventory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProductInventoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProductInventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductInventories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductInventoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProductInventories
   * const productInventory = await prisma.productInventory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProductInventoryUpdateManyArgs>(args: Prisma.SelectSubset<T, ProductInventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductInventories and returns the data updated in the database.
   * @param {ProductInventoryUpdateManyAndReturnArgs} args - Arguments to update many ProductInventories.
   * @example
   * // Update many ProductInventories
   * const productInventory = await prisma.productInventory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProductInventories and only return the `id`
   * const productInventoryWithIdOnly = await prisma.productInventory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProductInventoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProductInventoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductInventoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProductInventory.
   * @param {ProductInventoryUpsertArgs} args - Arguments to update or create a ProductInventory.
   * @example
   * // Update or create a ProductInventory
   * const productInventory = await prisma.productInventory.upsert({
   *   create: {
   *     // ... data to create a ProductInventory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProductInventory we want to update
   *   }
   * })
   */
  upsert<T extends ProductInventoryUpsertArgs>(args: Prisma.SelectSubset<T, ProductInventoryUpsertArgs<ExtArgs>>): Prisma.Prisma__ProductInventoryClient<runtime.Types.Result.GetResult<Prisma.$ProductInventoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProductInventories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductInventoryCountArgs} args - Arguments to filter ProductInventories to count.
   * @example
   * // Count the number of ProductInventories
   * const count = await prisma.productInventory.count({
   *   where: {
   *     // ... the filter for the ProductInventories we want to count
   *   }
   * })
  **/
  count<T extends ProductInventoryCountArgs>(
    args?: Prisma.Subset<T, ProductInventoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductInventoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProductInventory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductInventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductInventoryAggregateArgs>(args: Prisma.Subset<T, ProductInventoryAggregateArgs>): Prisma.PrismaPromise<GetProductInventoryAggregateType<T>>

  /**
   * Group by ProductInventory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductInventoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProductInventoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProductInventoryGroupByArgs['orderBy'] }
      : { orderBy?: ProductInventoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProductInventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProductInventory model
 */
readonly fields: ProductInventoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProductInventory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProductInventoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProductInventory model
 */
export interface ProductInventoryFieldRefs {
  readonly id: Prisma.FieldRef<"ProductInventory", 'String'>
  readonly productId: Prisma.FieldRef<"ProductInventory", 'String'>
  readonly size: Prisma.FieldRef<"ProductInventory", 'Size'>
  readonly quantity: Prisma.FieldRef<"ProductInventory", 'Int'>
  readonly dateCreated: Prisma.FieldRef<"ProductInventory", 'DateTime'>
  readonly dateUpdated: Prisma.FieldRef<"ProductInventory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProductInventory findUnique
 */
export type ProductInventoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductInventory
   */
  select?: Prisma.ProductInventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductInventory
   */
  omit?: Prisma.ProductInventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInventoryInclude<ExtArgs> | null
  /**
   * Filter, which ProductInventory to fetch.
   */
  where: Prisma.ProductInventoryWhereUniqueInput
}

/**
 * ProductInventory findUniqueOrThrow
 */
export type ProductInventoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductInventory
   */
  select?: Prisma.ProductInventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductInventory
   */
  omit?: Prisma.ProductInventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInventoryInclude<ExtArgs> | null
  /**
   * Filter, which ProductInventory to fetch.
   */
  where: Prisma.ProductInventoryWhereUniqueInput
}

/**
 * ProductInventory findFirst
 */
export type ProductInventoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductInventory
   */
  select?: Prisma.ProductInventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductInventory
   */
  omit?: Prisma.ProductInventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInventoryInclude<ExtArgs> | null
  /**
   * Filter, which ProductInventory to fetch.
   */
  where?: Prisma.ProductInventoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductInventories to fetch.
   */
  orderBy?: Prisma.ProductInventoryOrderByWithRelationInput | Prisma.ProductInventoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductInventories.
   */
  cursor?: Prisma.ProductInventoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductInventories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductInventories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductInventories.
   */
  distinct?: Prisma.ProductInventoryScalarFieldEnum | Prisma.ProductInventoryScalarFieldEnum[]
}

/**
 * ProductInventory findFirstOrThrow
 */
export type ProductInventoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductInventory
   */
  select?: Prisma.ProductInventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductInventory
   */
  omit?: Prisma.ProductInventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInventoryInclude<ExtArgs> | null
  /**
   * Filter, which ProductInventory to fetch.
   */
  where?: Prisma.ProductInventoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductInventories to fetch.
   */
  orderBy?: Prisma.ProductInventoryOrderByWithRelationInput | Prisma.ProductInventoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductInventories.
   */
  cursor?: Prisma.ProductInventoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductInventories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductInventories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductInventories.
   */
  distinct?: Prisma.ProductInventoryScalarFieldEnum | Prisma.ProductInventoryScalarFieldEnum[]
}

/**
 * ProductInventory findMany
 */
export type ProductInventoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductInventory
   */
  select?: Prisma.ProductInventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductInventory
   */
  omit?: Prisma.ProductInventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInventoryInclude<ExtArgs> | null
  /**
   * Filter, which ProductInventories to fetch.
   */
  where?: Prisma.ProductInventoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductInventories to fetch.
   */
  orderBy?: Prisma.ProductInventoryOrderByWithRelationInput | Prisma.ProductInventoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProductInventories.
   */
  cursor?: Prisma.ProductInventoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductInventories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductInventories.
   */
  skip?: number
  distinct?: Prisma.ProductInventoryScalarFieldEnum | Prisma.ProductInventoryScalarFieldEnum[]
}

/**
 * ProductInventory create
 */
export type ProductInventoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductInventory
   */
  select?: Prisma.ProductInventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductInventory
   */
  omit?: Prisma.ProductInventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInventoryInclude<ExtArgs> | null
  /**
   * The data needed to create a ProductInventory.
   */
  data: Prisma.XOR<Prisma.ProductInventoryCreateInput, Prisma.ProductInventoryUncheckedCreateInput>
}

/**
 * ProductInventory createMany
 */
export type ProductInventoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProductInventories.
   */
  data: Prisma.ProductInventoryCreateManyInput | Prisma.ProductInventoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProductInventory createManyAndReturn
 */
export type ProductInventoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductInventory
   */
  select?: Prisma.ProductInventorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductInventory
   */
  omit?: Prisma.ProductInventoryOmit<ExtArgs> | null
  /**
   * The data used to create many ProductInventories.
   */
  data: Prisma.ProductInventoryCreateManyInput | Prisma.ProductInventoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInventoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProductInventory update
 */
export type ProductInventoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductInventory
   */
  select?: Prisma.ProductInventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductInventory
   */
  omit?: Prisma.ProductInventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInventoryInclude<ExtArgs> | null
  /**
   * The data needed to update a ProductInventory.
   */
  data: Prisma.XOR<Prisma.ProductInventoryUpdateInput, Prisma.ProductInventoryUncheckedUpdateInput>
  /**
   * Choose, which ProductInventory to update.
   */
  where: Prisma.ProductInventoryWhereUniqueInput
}

/**
 * ProductInventory updateMany
 */
export type ProductInventoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProductInventories.
   */
  data: Prisma.XOR<Prisma.ProductInventoryUpdateManyMutationInput, Prisma.ProductInventoryUncheckedUpdateManyInput>
  /**
   * Filter which ProductInventories to update
   */
  where?: Prisma.ProductInventoryWhereInput
  /**
   * Limit how many ProductInventories to update.
   */
  limit?: number
}

/**
 * ProductInventory updateManyAndReturn
 */
export type ProductInventoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductInventory
   */
  select?: Prisma.ProductInventorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductInventory
   */
  omit?: Prisma.ProductInventoryOmit<ExtArgs> | null
  /**
   * The data used to update ProductInventories.
   */
  data: Prisma.XOR<Prisma.ProductInventoryUpdateManyMutationInput, Prisma.ProductInventoryUncheckedUpdateManyInput>
  /**
   * Filter which ProductInventories to update
   */
  where?: Prisma.ProductInventoryWhereInput
  /**
   * Limit how many ProductInventories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInventoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProductInventory upsert
 */
export type ProductInventoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductInventory
   */
  select?: Prisma.ProductInventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductInventory
   */
  omit?: Prisma.ProductInventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInventoryInclude<ExtArgs> | null
  /**
   * The filter to search for the ProductInventory to update in case it exists.
   */
  where: Prisma.ProductInventoryWhereUniqueInput
  /**
   * In case the ProductInventory found by the `where` argument doesn't exist, create a new ProductInventory with this data.
   */
  create: Prisma.XOR<Prisma.ProductInventoryCreateInput, Prisma.ProductInventoryUncheckedCreateInput>
  /**
   * In case the ProductInventory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProductInventoryUpdateInput, Prisma.ProductInventoryUncheckedUpdateInput>
}

/**
 * ProductInventory delete
 */
export type ProductInventoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductInventory
   */
  select?: Prisma.ProductInventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductInventory
   */
  omit?: Prisma.ProductInventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInventoryInclude<ExtArgs> | null
  /**
   * Filter which ProductInventory to delete.
   */
  where: Prisma.ProductInventoryWhereUniqueInput
}

/**
 * ProductInventory deleteMany
 */
export type ProductInventoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductInventories to delete
   */
  where?: Prisma.ProductInventoryWhereInput
  /**
   * Limit how many ProductInventories to delete.
   */
  limit?: number
}

/**
 * ProductInventory without action
 */
export type ProductInventoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductInventory
   */
  select?: Prisma.ProductInventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductInventory
   */
  omit?: Prisma.ProductInventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInventoryInclude<ExtArgs> | null
}
