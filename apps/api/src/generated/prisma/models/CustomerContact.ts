
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `CustomerContact` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model CustomerContact
 * 
 */
export type CustomerContactModel = runtime.Types.Result.DefaultSelection<Prisma.$CustomerContactPayload>

export type AggregateCustomerContact = {
  _count: CustomerContactCountAggregateOutputType | null
  _min: CustomerContactMinAggregateOutputType | null
  _max: CustomerContactMaxAggregateOutputType | null
}

export type CustomerContactMinAggregateOutputType = {
  id: string | null
  customerId: string | null
  firstName: string | null
  lastName: string | null
  email: string | null
  streetAddress: string | null
  streetAddress2: string | null
  city: string | null
  stateId: string | null
  zip: string | null
  phone: string | null
  isActive: boolean | null
  dateCreated: Date | null
  dateUpdated: Date | null
}

export type CustomerContactMaxAggregateOutputType = {
  id: string | null
  customerId: string | null
  firstName: string | null
  lastName: string | null
  email: string | null
  streetAddress: string | null
  streetAddress2: string | null
  city: string | null
  stateId: string | null
  zip: string | null
  phone: string | null
  isActive: boolean | null
  dateCreated: Date | null
  dateUpdated: Date | null
}

export type CustomerContactCountAggregateOutputType = {
  id: number
  customerId: number
  firstName: number
  lastName: number
  email: number
  streetAddress: number
  streetAddress2: number
  city: number
  stateId: number
  zip: number
  phone: number
  isActive: number
  dateCreated: number
  dateUpdated: number
  _all: number
}


export type CustomerContactMinAggregateInputType = {
  id?: true
  customerId?: true
  firstName?: true
  lastName?: true
  email?: true
  streetAddress?: true
  streetAddress2?: true
  city?: true
  stateId?: true
  zip?: true
  phone?: true
  isActive?: true
  dateCreated?: true
  dateUpdated?: true
}

export type CustomerContactMaxAggregateInputType = {
  id?: true
  customerId?: true
  firstName?: true
  lastName?: true
  email?: true
  streetAddress?: true
  streetAddress2?: true
  city?: true
  stateId?: true
  zip?: true
  phone?: true
  isActive?: true
  dateCreated?: true
  dateUpdated?: true
}

export type CustomerContactCountAggregateInputType = {
  id?: true
  customerId?: true
  firstName?: true
  lastName?: true
  email?: true
  streetAddress?: true
  streetAddress2?: true
  city?: true
  stateId?: true
  zip?: true
  phone?: true
  isActive?: true
  dateCreated?: true
  dateUpdated?: true
  _all?: true
}

export type CustomerContactAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CustomerContact to aggregate.
   */
  where?: Prisma.CustomerContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CustomerContacts to fetch.
   */
  orderBy?: Prisma.CustomerContactOrderByWithRelationInput | Prisma.CustomerContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CustomerContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CustomerContacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CustomerContacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CustomerContacts
  **/
  _count?: true | CustomerContactCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CustomerContactMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CustomerContactMaxAggregateInputType
}

export type GetCustomerContactAggregateType<T extends CustomerContactAggregateArgs> = {
      [P in keyof T & keyof AggregateCustomerContact]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCustomerContact[P]>
    : Prisma.GetScalarType<T[P], AggregateCustomerContact[P]>
}




export type CustomerContactGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CustomerContactWhereInput
  orderBy?: Prisma.CustomerContactOrderByWithAggregationInput | Prisma.CustomerContactOrderByWithAggregationInput[]
  by: Prisma.CustomerContactScalarFieldEnum[] | Prisma.CustomerContactScalarFieldEnum
  having?: Prisma.CustomerContactScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CustomerContactCountAggregateInputType | true
  _min?: CustomerContactMinAggregateInputType
  _max?: CustomerContactMaxAggregateInputType
}

export type CustomerContactGroupByOutputType = {
  id: string
  customerId: string
  firstName: string
  lastName: string
  email: string
  streetAddress: string
  streetAddress2: string | null
  city: string
  stateId: string
  zip: string
  phone: string
  isActive: boolean
  dateCreated: Date
  dateUpdated: Date
  _count: CustomerContactCountAggregateOutputType | null
  _min: CustomerContactMinAggregateOutputType | null
  _max: CustomerContactMaxAggregateOutputType | null
}

type GetCustomerContactGroupByPayload<T extends CustomerContactGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CustomerContactGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CustomerContactGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CustomerContactGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CustomerContactGroupByOutputType[P]>
      }
    >
  >



export type CustomerContactWhereInput = {
  AND?: Prisma.CustomerContactWhereInput | Prisma.CustomerContactWhereInput[]
  OR?: Prisma.CustomerContactWhereInput[]
  NOT?: Prisma.CustomerContactWhereInput | Prisma.CustomerContactWhereInput[]
  id?: Prisma.StringFilter<"CustomerContact"> | string
  customerId?: Prisma.StringFilter<"CustomerContact"> | string
  firstName?: Prisma.StringFilter<"CustomerContact"> | string
  lastName?: Prisma.StringFilter<"CustomerContact"> | string
  email?: Prisma.StringFilter<"CustomerContact"> | string
  streetAddress?: Prisma.StringFilter<"CustomerContact"> | string
  streetAddress2?: Prisma.StringNullableFilter<"CustomerContact"> | string | null
  city?: Prisma.StringFilter<"CustomerContact"> | string
  stateId?: Prisma.StringFilter<"CustomerContact"> | string
  zip?: Prisma.StringFilter<"CustomerContact"> | string
  phone?: Prisma.StringFilter<"CustomerContact"> | string
  isActive?: Prisma.BoolFilter<"CustomerContact"> | boolean
  dateCreated?: Prisma.DateTimeFilter<"CustomerContact"> | Date | string
  dateUpdated?: Prisma.DateTimeFilter<"CustomerContact"> | Date | string
  customer?: Prisma.XOR<Prisma.CustomerScalarRelationFilter, Prisma.CustomerWhereInput>
  state?: Prisma.XOR<Prisma.StateScalarRelationFilter, Prisma.StateWhereInput>
}

export type CustomerContactOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  streetAddress?: Prisma.SortOrder
  streetAddress2?: Prisma.SortOrderInput | Prisma.SortOrder
  city?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  zip?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
  customer?: Prisma.CustomerOrderByWithRelationInput
  state?: Prisma.StateOrderByWithRelationInput
  _relevance?: Prisma.CustomerContactOrderByRelevanceInput
}

export type CustomerContactWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CustomerContactWhereInput | Prisma.CustomerContactWhereInput[]
  OR?: Prisma.CustomerContactWhereInput[]
  NOT?: Prisma.CustomerContactWhereInput | Prisma.CustomerContactWhereInput[]
  customerId?: Prisma.StringFilter<"CustomerContact"> | string
  firstName?: Prisma.StringFilter<"CustomerContact"> | string
  lastName?: Prisma.StringFilter<"CustomerContact"> | string
  email?: Prisma.StringFilter<"CustomerContact"> | string
  streetAddress?: Prisma.StringFilter<"CustomerContact"> | string
  streetAddress2?: Prisma.StringNullableFilter<"CustomerContact"> | string | null
  city?: Prisma.StringFilter<"CustomerContact"> | string
  stateId?: Prisma.StringFilter<"CustomerContact"> | string
  zip?: Prisma.StringFilter<"CustomerContact"> | string
  phone?: Prisma.StringFilter<"CustomerContact"> | string
  isActive?: Prisma.BoolFilter<"CustomerContact"> | boolean
  dateCreated?: Prisma.DateTimeFilter<"CustomerContact"> | Date | string
  dateUpdated?: Prisma.DateTimeFilter<"CustomerContact"> | Date | string
  customer?: Prisma.XOR<Prisma.CustomerScalarRelationFilter, Prisma.CustomerWhereInput>
  state?: Prisma.XOR<Prisma.StateScalarRelationFilter, Prisma.StateWhereInput>
}, "id">

export type CustomerContactOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  streetAddress?: Prisma.SortOrder
  streetAddress2?: Prisma.SortOrderInput | Prisma.SortOrder
  city?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  zip?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
  _count?: Prisma.CustomerContactCountOrderByAggregateInput
  _max?: Prisma.CustomerContactMaxOrderByAggregateInput
  _min?: Prisma.CustomerContactMinOrderByAggregateInput
}

export type CustomerContactScalarWhereWithAggregatesInput = {
  AND?: Prisma.CustomerContactScalarWhereWithAggregatesInput | Prisma.CustomerContactScalarWhereWithAggregatesInput[]
  OR?: Prisma.CustomerContactScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CustomerContactScalarWhereWithAggregatesInput | Prisma.CustomerContactScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CustomerContact"> | string
  customerId?: Prisma.StringWithAggregatesFilter<"CustomerContact"> | string
  firstName?: Prisma.StringWithAggregatesFilter<"CustomerContact"> | string
  lastName?: Prisma.StringWithAggregatesFilter<"CustomerContact"> | string
  email?: Prisma.StringWithAggregatesFilter<"CustomerContact"> | string
  streetAddress?: Prisma.StringWithAggregatesFilter<"CustomerContact"> | string
  streetAddress2?: Prisma.StringNullableWithAggregatesFilter<"CustomerContact"> | string | null
  city?: Prisma.StringWithAggregatesFilter<"CustomerContact"> | string
  stateId?: Prisma.StringWithAggregatesFilter<"CustomerContact"> | string
  zip?: Prisma.StringWithAggregatesFilter<"CustomerContact"> | string
  phone?: Prisma.StringWithAggregatesFilter<"CustomerContact"> | string
  isActive?: Prisma.BoolWithAggregatesFilter<"CustomerContact"> | boolean
  dateCreated?: Prisma.DateTimeWithAggregatesFilter<"CustomerContact"> | Date | string
  dateUpdated?: Prisma.DateTimeWithAggregatesFilter<"CustomerContact"> | Date | string
}

export type CustomerContactCreateInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  streetAddress: string
  streetAddress2?: string | null
  city: string
  zip: string
  phone: string
  isActive?: boolean
  dateCreated?: Date | string
  dateUpdated?: Date | string
  customer: Prisma.CustomerCreateNestedOneWithoutCustomerContactInput
  state: Prisma.StateCreateNestedOneWithoutCustomerContactInput
}

export type CustomerContactUncheckedCreateInput = {
  id?: string
  customerId: string
  firstName: string
  lastName: string
  email: string
  streetAddress: string
  streetAddress2?: string | null
  city: string
  stateId: string
  zip: string
  phone: string
  isActive?: boolean
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type CustomerContactUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.StringFieldUpdateOperationsInput | string
  zip?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  customer?: Prisma.CustomerUpdateOneRequiredWithoutCustomerContactNestedInput
  state?: Prisma.StateUpdateOneRequiredWithoutCustomerContactNestedInput
}

export type CustomerContactUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  customerId?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.StringFieldUpdateOperationsInput | string
  stateId?: Prisma.StringFieldUpdateOperationsInput | string
  zip?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CustomerContactCreateManyInput = {
  id?: string
  customerId: string
  firstName: string
  lastName: string
  email: string
  streetAddress: string
  streetAddress2?: string | null
  city: string
  stateId: string
  zip: string
  phone: string
  isActive?: boolean
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type CustomerContactUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.StringFieldUpdateOperationsInput | string
  zip?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CustomerContactUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  customerId?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.StringFieldUpdateOperationsInput | string
  stateId?: Prisma.StringFieldUpdateOperationsInput | string
  zip?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CustomerContactListRelationFilter = {
  every?: Prisma.CustomerContactWhereInput
  some?: Prisma.CustomerContactWhereInput
  none?: Prisma.CustomerContactWhereInput
}

export type CustomerContactOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CustomerContactOrderByRelevanceInput = {
  fields: Prisma.CustomerContactOrderByRelevanceFieldEnum | Prisma.CustomerContactOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type CustomerContactCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  streetAddress?: Prisma.SortOrder
  streetAddress2?: Prisma.SortOrder
  city?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  zip?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
}

export type CustomerContactMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  streetAddress?: Prisma.SortOrder
  streetAddress2?: Prisma.SortOrder
  city?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  zip?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
}

export type CustomerContactMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  streetAddress?: Prisma.SortOrder
  streetAddress2?: Prisma.SortOrder
  city?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  zip?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
}

export type CustomerContactCreateNestedManyWithoutStateInput = {
  create?: Prisma.XOR<Prisma.CustomerContactCreateWithoutStateInput, Prisma.CustomerContactUncheckedCreateWithoutStateInput> | Prisma.CustomerContactCreateWithoutStateInput[] | Prisma.CustomerContactUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.CustomerContactCreateOrConnectWithoutStateInput | Prisma.CustomerContactCreateOrConnectWithoutStateInput[]
  createMany?: Prisma.CustomerContactCreateManyStateInputEnvelope
  connect?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
}

export type CustomerContactUncheckedCreateNestedManyWithoutStateInput = {
  create?: Prisma.XOR<Prisma.CustomerContactCreateWithoutStateInput, Prisma.CustomerContactUncheckedCreateWithoutStateInput> | Prisma.CustomerContactCreateWithoutStateInput[] | Prisma.CustomerContactUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.CustomerContactCreateOrConnectWithoutStateInput | Prisma.CustomerContactCreateOrConnectWithoutStateInput[]
  createMany?: Prisma.CustomerContactCreateManyStateInputEnvelope
  connect?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
}

export type CustomerContactUpdateManyWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.CustomerContactCreateWithoutStateInput, Prisma.CustomerContactUncheckedCreateWithoutStateInput> | Prisma.CustomerContactCreateWithoutStateInput[] | Prisma.CustomerContactUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.CustomerContactCreateOrConnectWithoutStateInput | Prisma.CustomerContactCreateOrConnectWithoutStateInput[]
  upsert?: Prisma.CustomerContactUpsertWithWhereUniqueWithoutStateInput | Prisma.CustomerContactUpsertWithWhereUniqueWithoutStateInput[]
  createMany?: Prisma.CustomerContactCreateManyStateInputEnvelope
  set?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  disconnect?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  delete?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  connect?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  update?: Prisma.CustomerContactUpdateWithWhereUniqueWithoutStateInput | Prisma.CustomerContactUpdateWithWhereUniqueWithoutStateInput[]
  updateMany?: Prisma.CustomerContactUpdateManyWithWhereWithoutStateInput | Prisma.CustomerContactUpdateManyWithWhereWithoutStateInput[]
  deleteMany?: Prisma.CustomerContactScalarWhereInput | Prisma.CustomerContactScalarWhereInput[]
}

export type CustomerContactUncheckedUpdateManyWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.CustomerContactCreateWithoutStateInput, Prisma.CustomerContactUncheckedCreateWithoutStateInput> | Prisma.CustomerContactCreateWithoutStateInput[] | Prisma.CustomerContactUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.CustomerContactCreateOrConnectWithoutStateInput | Prisma.CustomerContactCreateOrConnectWithoutStateInput[]
  upsert?: Prisma.CustomerContactUpsertWithWhereUniqueWithoutStateInput | Prisma.CustomerContactUpsertWithWhereUniqueWithoutStateInput[]
  createMany?: Prisma.CustomerContactCreateManyStateInputEnvelope
  set?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  disconnect?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  delete?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  connect?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  update?: Prisma.CustomerContactUpdateWithWhereUniqueWithoutStateInput | Prisma.CustomerContactUpdateWithWhereUniqueWithoutStateInput[]
  updateMany?: Prisma.CustomerContactUpdateManyWithWhereWithoutStateInput | Prisma.CustomerContactUpdateManyWithWhereWithoutStateInput[]
  deleteMany?: Prisma.CustomerContactScalarWhereInput | Prisma.CustomerContactScalarWhereInput[]
}

export type CustomerContactCreateNestedManyWithoutCustomerInput = {
  create?: Prisma.XOR<Prisma.CustomerContactCreateWithoutCustomerInput, Prisma.CustomerContactUncheckedCreateWithoutCustomerInput> | Prisma.CustomerContactCreateWithoutCustomerInput[] | Prisma.CustomerContactUncheckedCreateWithoutCustomerInput[]
  connectOrCreate?: Prisma.CustomerContactCreateOrConnectWithoutCustomerInput | Prisma.CustomerContactCreateOrConnectWithoutCustomerInput[]
  createMany?: Prisma.CustomerContactCreateManyCustomerInputEnvelope
  connect?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
}

export type CustomerContactUncheckedCreateNestedManyWithoutCustomerInput = {
  create?: Prisma.XOR<Prisma.CustomerContactCreateWithoutCustomerInput, Prisma.CustomerContactUncheckedCreateWithoutCustomerInput> | Prisma.CustomerContactCreateWithoutCustomerInput[] | Prisma.CustomerContactUncheckedCreateWithoutCustomerInput[]
  connectOrCreate?: Prisma.CustomerContactCreateOrConnectWithoutCustomerInput | Prisma.CustomerContactCreateOrConnectWithoutCustomerInput[]
  createMany?: Prisma.CustomerContactCreateManyCustomerInputEnvelope
  connect?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
}

export type CustomerContactUpdateManyWithoutCustomerNestedInput = {
  create?: Prisma.XOR<Prisma.CustomerContactCreateWithoutCustomerInput, Prisma.CustomerContactUncheckedCreateWithoutCustomerInput> | Prisma.CustomerContactCreateWithoutCustomerInput[] | Prisma.CustomerContactUncheckedCreateWithoutCustomerInput[]
  connectOrCreate?: Prisma.CustomerContactCreateOrConnectWithoutCustomerInput | Prisma.CustomerContactCreateOrConnectWithoutCustomerInput[]
  upsert?: Prisma.CustomerContactUpsertWithWhereUniqueWithoutCustomerInput | Prisma.CustomerContactUpsertWithWhereUniqueWithoutCustomerInput[]
  createMany?: Prisma.CustomerContactCreateManyCustomerInputEnvelope
  set?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  disconnect?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  delete?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  connect?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  update?: Prisma.CustomerContactUpdateWithWhereUniqueWithoutCustomerInput | Prisma.CustomerContactUpdateWithWhereUniqueWithoutCustomerInput[]
  updateMany?: Prisma.CustomerContactUpdateManyWithWhereWithoutCustomerInput | Prisma.CustomerContactUpdateManyWithWhereWithoutCustomerInput[]
  deleteMany?: Prisma.CustomerContactScalarWhereInput | Prisma.CustomerContactScalarWhereInput[]
}

export type CustomerContactUncheckedUpdateManyWithoutCustomerNestedInput = {
  create?: Prisma.XOR<Prisma.CustomerContactCreateWithoutCustomerInput, Prisma.CustomerContactUncheckedCreateWithoutCustomerInput> | Prisma.CustomerContactCreateWithoutCustomerInput[] | Prisma.CustomerContactUncheckedCreateWithoutCustomerInput[]
  connectOrCreate?: Prisma.CustomerContactCreateOrConnectWithoutCustomerInput | Prisma.CustomerContactCreateOrConnectWithoutCustomerInput[]
  upsert?: Prisma.CustomerContactUpsertWithWhereUniqueWithoutCustomerInput | Prisma.CustomerContactUpsertWithWhereUniqueWithoutCustomerInput[]
  createMany?: Prisma.CustomerContactCreateManyCustomerInputEnvelope
  set?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  disconnect?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  delete?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  connect?: Prisma.CustomerContactWhereUniqueInput | Prisma.CustomerContactWhereUniqueInput[]
  update?: Prisma.CustomerContactUpdateWithWhereUniqueWithoutCustomerInput | Prisma.CustomerContactUpdateWithWhereUniqueWithoutCustomerInput[]
  updateMany?: Prisma.CustomerContactUpdateManyWithWhereWithoutCustomerInput | Prisma.CustomerContactUpdateManyWithWhereWithoutCustomerInput[]
  deleteMany?: Prisma.CustomerContactScalarWhereInput | Prisma.CustomerContactScalarWhereInput[]
}

export type CustomerContactCreateWithoutStateInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  streetAddress: string
  streetAddress2?: string | null
  city: string
  zip: string
  phone: string
  isActive?: boolean
  dateCreated?: Date | string
  dateUpdated?: Date | string
  customer: Prisma.CustomerCreateNestedOneWithoutCustomerContactInput
}

export type CustomerContactUncheckedCreateWithoutStateInput = {
  id?: string
  customerId: string
  firstName: string
  lastName: string
  email: string
  streetAddress: string
  streetAddress2?: string | null
  city: string
  zip: string
  phone: string
  isActive?: boolean
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type CustomerContactCreateOrConnectWithoutStateInput = {
  where: Prisma.CustomerContactWhereUniqueInput
  create: Prisma.XOR<Prisma.CustomerContactCreateWithoutStateInput, Prisma.CustomerContactUncheckedCreateWithoutStateInput>
}

export type CustomerContactCreateManyStateInputEnvelope = {
  data: Prisma.CustomerContactCreateManyStateInput | Prisma.CustomerContactCreateManyStateInput[]
  skipDuplicates?: boolean
}

export type CustomerContactUpsertWithWhereUniqueWithoutStateInput = {
  where: Prisma.CustomerContactWhereUniqueInput
  update: Prisma.XOR<Prisma.CustomerContactUpdateWithoutStateInput, Prisma.CustomerContactUncheckedUpdateWithoutStateInput>
  create: Prisma.XOR<Prisma.CustomerContactCreateWithoutStateInput, Prisma.CustomerContactUncheckedCreateWithoutStateInput>
}

export type CustomerContactUpdateWithWhereUniqueWithoutStateInput = {
  where: Prisma.CustomerContactWhereUniqueInput
  data: Prisma.XOR<Prisma.CustomerContactUpdateWithoutStateInput, Prisma.CustomerContactUncheckedUpdateWithoutStateInput>
}

export type CustomerContactUpdateManyWithWhereWithoutStateInput = {
  where: Prisma.CustomerContactScalarWhereInput
  data: Prisma.XOR<Prisma.CustomerContactUpdateManyMutationInput, Prisma.CustomerContactUncheckedUpdateManyWithoutStateInput>
}

export type CustomerContactScalarWhereInput = {
  AND?: Prisma.CustomerContactScalarWhereInput | Prisma.CustomerContactScalarWhereInput[]
  OR?: Prisma.CustomerContactScalarWhereInput[]
  NOT?: Prisma.CustomerContactScalarWhereInput | Prisma.CustomerContactScalarWhereInput[]
  id?: Prisma.StringFilter<"CustomerContact"> | string
  customerId?: Prisma.StringFilter<"CustomerContact"> | string
  firstName?: Prisma.StringFilter<"CustomerContact"> | string
  lastName?: Prisma.StringFilter<"CustomerContact"> | string
  email?: Prisma.StringFilter<"CustomerContact"> | string
  streetAddress?: Prisma.StringFilter<"CustomerContact"> | string
  streetAddress2?: Prisma.StringNullableFilter<"CustomerContact"> | string | null
  city?: Prisma.StringFilter<"CustomerContact"> | string
  stateId?: Prisma.StringFilter<"CustomerContact"> | string
  zip?: Prisma.StringFilter<"CustomerContact"> | string
  phone?: Prisma.StringFilter<"CustomerContact"> | string
  isActive?: Prisma.BoolFilter<"CustomerContact"> | boolean
  dateCreated?: Prisma.DateTimeFilter<"CustomerContact"> | Date | string
  dateUpdated?: Prisma.DateTimeFilter<"CustomerContact"> | Date | string
}

export type CustomerContactCreateWithoutCustomerInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  streetAddress: string
  streetAddress2?: string | null
  city: string
  zip: string
  phone: string
  isActive?: boolean
  dateCreated?: Date | string
  dateUpdated?: Date | string
  state: Prisma.StateCreateNestedOneWithoutCustomerContactInput
}

export type CustomerContactUncheckedCreateWithoutCustomerInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  streetAddress: string
  streetAddress2?: string | null
  city: string
  stateId: string
  zip: string
  phone: string
  isActive?: boolean
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type CustomerContactCreateOrConnectWithoutCustomerInput = {
  where: Prisma.CustomerContactWhereUniqueInput
  create: Prisma.XOR<Prisma.CustomerContactCreateWithoutCustomerInput, Prisma.CustomerContactUncheckedCreateWithoutCustomerInput>
}

export type CustomerContactCreateManyCustomerInputEnvelope = {
  data: Prisma.CustomerContactCreateManyCustomerInput | Prisma.CustomerContactCreateManyCustomerInput[]
  skipDuplicates?: boolean
}

export type CustomerContactUpsertWithWhereUniqueWithoutCustomerInput = {
  where: Prisma.CustomerContactWhereUniqueInput
  update: Prisma.XOR<Prisma.CustomerContactUpdateWithoutCustomerInput, Prisma.CustomerContactUncheckedUpdateWithoutCustomerInput>
  create: Prisma.XOR<Prisma.CustomerContactCreateWithoutCustomerInput, Prisma.CustomerContactUncheckedCreateWithoutCustomerInput>
}

export type CustomerContactUpdateWithWhereUniqueWithoutCustomerInput = {
  where: Prisma.CustomerContactWhereUniqueInput
  data: Prisma.XOR<Prisma.CustomerContactUpdateWithoutCustomerInput, Prisma.CustomerContactUncheckedUpdateWithoutCustomerInput>
}

export type CustomerContactUpdateManyWithWhereWithoutCustomerInput = {
  where: Prisma.CustomerContactScalarWhereInput
  data: Prisma.XOR<Prisma.CustomerContactUpdateManyMutationInput, Prisma.CustomerContactUncheckedUpdateManyWithoutCustomerInput>
}

export type CustomerContactCreateManyStateInput = {
  id?: string
  customerId: string
  firstName: string
  lastName: string
  email: string
  streetAddress: string
  streetAddress2?: string | null
  city: string
  zip: string
  phone: string
  isActive?: boolean
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type CustomerContactUpdateWithoutStateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.StringFieldUpdateOperationsInput | string
  zip?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  customer?: Prisma.CustomerUpdateOneRequiredWithoutCustomerContactNestedInput
}

export type CustomerContactUncheckedUpdateWithoutStateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  customerId?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.StringFieldUpdateOperationsInput | string
  zip?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CustomerContactUncheckedUpdateManyWithoutStateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  customerId?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.StringFieldUpdateOperationsInput | string
  zip?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CustomerContactCreateManyCustomerInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  streetAddress: string
  streetAddress2?: string | null
  city: string
  stateId: string
  zip: string
  phone: string
  isActive?: boolean
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type CustomerContactUpdateWithoutCustomerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.StringFieldUpdateOperationsInput | string
  zip?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  state?: Prisma.StateUpdateOneRequiredWithoutCustomerContactNestedInput
}

export type CustomerContactUncheckedUpdateWithoutCustomerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.StringFieldUpdateOperationsInput | string
  stateId?: Prisma.StringFieldUpdateOperationsInput | string
  zip?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CustomerContactUncheckedUpdateManyWithoutCustomerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress?: Prisma.StringFieldUpdateOperationsInput | string
  streetAddress2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  city?: Prisma.StringFieldUpdateOperationsInput | string
  stateId?: Prisma.StringFieldUpdateOperationsInput | string
  zip?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CustomerContactSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  customerId?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  streetAddress?: boolean
  streetAddress2?: boolean
  city?: boolean
  stateId?: boolean
  zip?: boolean
  phone?: boolean
  isActive?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
  state?: boolean | Prisma.StateDefaultArgs<ExtArgs>
}, ExtArgs["result"]["customerContact"]>

export type CustomerContactSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  customerId?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  streetAddress?: boolean
  streetAddress2?: boolean
  city?: boolean
  stateId?: boolean
  zip?: boolean
  phone?: boolean
  isActive?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
  state?: boolean | Prisma.StateDefaultArgs<ExtArgs>
}, ExtArgs["result"]["customerContact"]>

export type CustomerContactSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  customerId?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  streetAddress?: boolean
  streetAddress2?: boolean
  city?: boolean
  stateId?: boolean
  zip?: boolean
  phone?: boolean
  isActive?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
  state?: boolean | Prisma.StateDefaultArgs<ExtArgs>
}, ExtArgs["result"]["customerContact"]>

export type CustomerContactSelectScalar = {
  id?: boolean
  customerId?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  streetAddress?: boolean
  streetAddress2?: boolean
  city?: boolean
  stateId?: boolean
  zip?: boolean
  phone?: boolean
  isActive?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
}

export type CustomerContactOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "customerId" | "firstName" | "lastName" | "email" | "streetAddress" | "streetAddress2" | "city" | "stateId" | "zip" | "phone" | "isActive" | "dateCreated" | "dateUpdated", ExtArgs["result"]["customerContact"]>
export type CustomerContactInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
  state?: boolean | Prisma.StateDefaultArgs<ExtArgs>
}
export type CustomerContactIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
  state?: boolean | Prisma.StateDefaultArgs<ExtArgs>
}
export type CustomerContactIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
  state?: boolean | Prisma.StateDefaultArgs<ExtArgs>
}

export type $CustomerContactPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CustomerContact"
  objects: {
    customer: Prisma.$CustomerPayload<ExtArgs>
    state: Prisma.$StatePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    customerId: string
    firstName: string
    lastName: string
    email: string
    streetAddress: string
    streetAddress2: string | null
    city: string
    stateId: string
    zip: string
    phone: string
    isActive: boolean
    dateCreated: Date
    dateUpdated: Date
  }, ExtArgs["result"]["customerContact"]>
  composites: {}
}

export type CustomerContactGetPayload<S extends boolean | null | undefined | CustomerContactDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CustomerContactPayload, S>

export type CustomerContactCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CustomerContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CustomerContactCountAggregateInputType | true
  }

export interface CustomerContactDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerContact'], meta: { name: 'CustomerContact' } }
  /**
   * Find zero or one CustomerContact that matches the filter.
   * @param {CustomerContactFindUniqueArgs} args - Arguments to find a CustomerContact
   * @example
   * // Get one CustomerContact
   * const customerContact = await prisma.customerContact.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CustomerContactFindUniqueArgs>(args: Prisma.SelectSubset<T, CustomerContactFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CustomerContactClient<runtime.Types.Result.GetResult<Prisma.$CustomerContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CustomerContact that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CustomerContactFindUniqueOrThrowArgs} args - Arguments to find a CustomerContact
   * @example
   * // Get one CustomerContact
   * const customerContact = await prisma.customerContact.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CustomerContactFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CustomerContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CustomerContactClient<runtime.Types.Result.GetResult<Prisma.$CustomerContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CustomerContact that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerContactFindFirstArgs} args - Arguments to find a CustomerContact
   * @example
   * // Get one CustomerContact
   * const customerContact = await prisma.customerContact.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CustomerContactFindFirstArgs>(args?: Prisma.SelectSubset<T, CustomerContactFindFirstArgs<ExtArgs>>): Prisma.Prisma__CustomerContactClient<runtime.Types.Result.GetResult<Prisma.$CustomerContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CustomerContact that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerContactFindFirstOrThrowArgs} args - Arguments to find a CustomerContact
   * @example
   * // Get one CustomerContact
   * const customerContact = await prisma.customerContact.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CustomerContactFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CustomerContactFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CustomerContactClient<runtime.Types.Result.GetResult<Prisma.$CustomerContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CustomerContacts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerContactFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CustomerContacts
   * const customerContacts = await prisma.customerContact.findMany()
   * 
   * // Get first 10 CustomerContacts
   * const customerContacts = await prisma.customerContact.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const customerContactWithIdOnly = await prisma.customerContact.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CustomerContactFindManyArgs>(args?: Prisma.SelectSubset<T, CustomerContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CustomerContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CustomerContact.
   * @param {CustomerContactCreateArgs} args - Arguments to create a CustomerContact.
   * @example
   * // Create one CustomerContact
   * const CustomerContact = await prisma.customerContact.create({
   *   data: {
   *     // ... data to create a CustomerContact
   *   }
   * })
   * 
   */
  create<T extends CustomerContactCreateArgs>(args: Prisma.SelectSubset<T, CustomerContactCreateArgs<ExtArgs>>): Prisma.Prisma__CustomerContactClient<runtime.Types.Result.GetResult<Prisma.$CustomerContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CustomerContacts.
   * @param {CustomerContactCreateManyArgs} args - Arguments to create many CustomerContacts.
   * @example
   * // Create many CustomerContacts
   * const customerContact = await prisma.customerContact.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CustomerContactCreateManyArgs>(args?: Prisma.SelectSubset<T, CustomerContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CustomerContacts and returns the data saved in the database.
   * @param {CustomerContactCreateManyAndReturnArgs} args - Arguments to create many CustomerContacts.
   * @example
   * // Create many CustomerContacts
   * const customerContact = await prisma.customerContact.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CustomerContacts and only return the `id`
   * const customerContactWithIdOnly = await prisma.customerContact.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CustomerContactCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CustomerContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CustomerContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CustomerContact.
   * @param {CustomerContactDeleteArgs} args - Arguments to delete one CustomerContact.
   * @example
   * // Delete one CustomerContact
   * const CustomerContact = await prisma.customerContact.delete({
   *   where: {
   *     // ... filter to delete one CustomerContact
   *   }
   * })
   * 
   */
  delete<T extends CustomerContactDeleteArgs>(args: Prisma.SelectSubset<T, CustomerContactDeleteArgs<ExtArgs>>): Prisma.Prisma__CustomerContactClient<runtime.Types.Result.GetResult<Prisma.$CustomerContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CustomerContact.
   * @param {CustomerContactUpdateArgs} args - Arguments to update one CustomerContact.
   * @example
   * // Update one CustomerContact
   * const customerContact = await prisma.customerContact.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CustomerContactUpdateArgs>(args: Prisma.SelectSubset<T, CustomerContactUpdateArgs<ExtArgs>>): Prisma.Prisma__CustomerContactClient<runtime.Types.Result.GetResult<Prisma.$CustomerContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CustomerContacts.
   * @param {CustomerContactDeleteManyArgs} args - Arguments to filter CustomerContacts to delete.
   * @example
   * // Delete a few CustomerContacts
   * const { count } = await prisma.customerContact.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CustomerContactDeleteManyArgs>(args?: Prisma.SelectSubset<T, CustomerContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CustomerContacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerContactUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CustomerContacts
   * const customerContact = await prisma.customerContact.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CustomerContactUpdateManyArgs>(args: Prisma.SelectSubset<T, CustomerContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CustomerContacts and returns the data updated in the database.
   * @param {CustomerContactUpdateManyAndReturnArgs} args - Arguments to update many CustomerContacts.
   * @example
   * // Update many CustomerContacts
   * const customerContact = await prisma.customerContact.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CustomerContacts and only return the `id`
   * const customerContactWithIdOnly = await prisma.customerContact.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CustomerContactUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CustomerContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CustomerContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CustomerContact.
   * @param {CustomerContactUpsertArgs} args - Arguments to update or create a CustomerContact.
   * @example
   * // Update or create a CustomerContact
   * const customerContact = await prisma.customerContact.upsert({
   *   create: {
   *     // ... data to create a CustomerContact
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CustomerContact we want to update
   *   }
   * })
   */
  upsert<T extends CustomerContactUpsertArgs>(args: Prisma.SelectSubset<T, CustomerContactUpsertArgs<ExtArgs>>): Prisma.Prisma__CustomerContactClient<runtime.Types.Result.GetResult<Prisma.$CustomerContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CustomerContacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerContactCountArgs} args - Arguments to filter CustomerContacts to count.
   * @example
   * // Count the number of CustomerContacts
   * const count = await prisma.customerContact.count({
   *   where: {
   *     // ... the filter for the CustomerContacts we want to count
   *   }
   * })
  **/
  count<T extends CustomerContactCountArgs>(
    args?: Prisma.Subset<T, CustomerContactCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CustomerContactCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CustomerContact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CustomerContactAggregateArgs>(args: Prisma.Subset<T, CustomerContactAggregateArgs>): Prisma.PrismaPromise<GetCustomerContactAggregateType<T>>

  /**
   * Group by CustomerContact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerContactGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CustomerContactGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CustomerContactGroupByArgs['orderBy'] }
      : { orderBy?: CustomerContactGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CustomerContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CustomerContact model
 */
readonly fields: CustomerContactFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CustomerContact.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CustomerContactClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  customer<T extends Prisma.CustomerDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CustomerDefaultArgs<ExtArgs>>): Prisma.Prisma__CustomerClient<runtime.Types.Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  state<T extends Prisma.StateDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StateDefaultArgs<ExtArgs>>): Prisma.Prisma__StateClient<runtime.Types.Result.GetResult<Prisma.$StatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CustomerContact model
 */
export interface CustomerContactFieldRefs {
  readonly id: Prisma.FieldRef<"CustomerContact", 'String'>
  readonly customerId: Prisma.FieldRef<"CustomerContact", 'String'>
  readonly firstName: Prisma.FieldRef<"CustomerContact", 'String'>
  readonly lastName: Prisma.FieldRef<"CustomerContact", 'String'>
  readonly email: Prisma.FieldRef<"CustomerContact", 'String'>
  readonly streetAddress: Prisma.FieldRef<"CustomerContact", 'String'>
  readonly streetAddress2: Prisma.FieldRef<"CustomerContact", 'String'>
  readonly city: Prisma.FieldRef<"CustomerContact", 'String'>
  readonly stateId: Prisma.FieldRef<"CustomerContact", 'String'>
  readonly zip: Prisma.FieldRef<"CustomerContact", 'String'>
  readonly phone: Prisma.FieldRef<"CustomerContact", 'String'>
  readonly isActive: Prisma.FieldRef<"CustomerContact", 'Boolean'>
  readonly dateCreated: Prisma.FieldRef<"CustomerContact", 'DateTime'>
  readonly dateUpdated: Prisma.FieldRef<"CustomerContact", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CustomerContact findUnique
 */
export type CustomerContactFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerContact
   */
  select?: Prisma.CustomerContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerContact
   */
  omit?: Prisma.CustomerContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerContactInclude<ExtArgs> | null
  /**
   * Filter, which CustomerContact to fetch.
   */
  where: Prisma.CustomerContactWhereUniqueInput
}

/**
 * CustomerContact findUniqueOrThrow
 */
export type CustomerContactFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerContact
   */
  select?: Prisma.CustomerContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerContact
   */
  omit?: Prisma.CustomerContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerContactInclude<ExtArgs> | null
  /**
   * Filter, which CustomerContact to fetch.
   */
  where: Prisma.CustomerContactWhereUniqueInput
}

/**
 * CustomerContact findFirst
 */
export type CustomerContactFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerContact
   */
  select?: Prisma.CustomerContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerContact
   */
  omit?: Prisma.CustomerContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerContactInclude<ExtArgs> | null
  /**
   * Filter, which CustomerContact to fetch.
   */
  where?: Prisma.CustomerContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CustomerContacts to fetch.
   */
  orderBy?: Prisma.CustomerContactOrderByWithRelationInput | Prisma.CustomerContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CustomerContacts.
   */
  cursor?: Prisma.CustomerContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CustomerContacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CustomerContacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CustomerContacts.
   */
  distinct?: Prisma.CustomerContactScalarFieldEnum | Prisma.CustomerContactScalarFieldEnum[]
}

/**
 * CustomerContact findFirstOrThrow
 */
export type CustomerContactFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerContact
   */
  select?: Prisma.CustomerContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerContact
   */
  omit?: Prisma.CustomerContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerContactInclude<ExtArgs> | null
  /**
   * Filter, which CustomerContact to fetch.
   */
  where?: Prisma.CustomerContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CustomerContacts to fetch.
   */
  orderBy?: Prisma.CustomerContactOrderByWithRelationInput | Prisma.CustomerContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CustomerContacts.
   */
  cursor?: Prisma.CustomerContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CustomerContacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CustomerContacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CustomerContacts.
   */
  distinct?: Prisma.CustomerContactScalarFieldEnum | Prisma.CustomerContactScalarFieldEnum[]
}

/**
 * CustomerContact findMany
 */
export type CustomerContactFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerContact
   */
  select?: Prisma.CustomerContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerContact
   */
  omit?: Prisma.CustomerContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerContactInclude<ExtArgs> | null
  /**
   * Filter, which CustomerContacts to fetch.
   */
  where?: Prisma.CustomerContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CustomerContacts to fetch.
   */
  orderBy?: Prisma.CustomerContactOrderByWithRelationInput | Prisma.CustomerContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CustomerContacts.
   */
  cursor?: Prisma.CustomerContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CustomerContacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CustomerContacts.
   */
  skip?: number
  distinct?: Prisma.CustomerContactScalarFieldEnum | Prisma.CustomerContactScalarFieldEnum[]
}

/**
 * CustomerContact create
 */
export type CustomerContactCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerContact
   */
  select?: Prisma.CustomerContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerContact
   */
  omit?: Prisma.CustomerContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerContactInclude<ExtArgs> | null
  /**
   * The data needed to create a CustomerContact.
   */
  data: Prisma.XOR<Prisma.CustomerContactCreateInput, Prisma.CustomerContactUncheckedCreateInput>
}

/**
 * CustomerContact createMany
 */
export type CustomerContactCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CustomerContacts.
   */
  data: Prisma.CustomerContactCreateManyInput | Prisma.CustomerContactCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CustomerContact createManyAndReturn
 */
export type CustomerContactCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerContact
   */
  select?: Prisma.CustomerContactSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerContact
   */
  omit?: Prisma.CustomerContactOmit<ExtArgs> | null
  /**
   * The data used to create many CustomerContacts.
   */
  data: Prisma.CustomerContactCreateManyInput | Prisma.CustomerContactCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerContactIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CustomerContact update
 */
export type CustomerContactUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerContact
   */
  select?: Prisma.CustomerContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerContact
   */
  omit?: Prisma.CustomerContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerContactInclude<ExtArgs> | null
  /**
   * The data needed to update a CustomerContact.
   */
  data: Prisma.XOR<Prisma.CustomerContactUpdateInput, Prisma.CustomerContactUncheckedUpdateInput>
  /**
   * Choose, which CustomerContact to update.
   */
  where: Prisma.CustomerContactWhereUniqueInput
}

/**
 * CustomerContact updateMany
 */
export type CustomerContactUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CustomerContacts.
   */
  data: Prisma.XOR<Prisma.CustomerContactUpdateManyMutationInput, Prisma.CustomerContactUncheckedUpdateManyInput>
  /**
   * Filter which CustomerContacts to update
   */
  where?: Prisma.CustomerContactWhereInput
  /**
   * Limit how many CustomerContacts to update.
   */
  limit?: number
}

/**
 * CustomerContact updateManyAndReturn
 */
export type CustomerContactUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerContact
   */
  select?: Prisma.CustomerContactSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerContact
   */
  omit?: Prisma.CustomerContactOmit<ExtArgs> | null
  /**
   * The data used to update CustomerContacts.
   */
  data: Prisma.XOR<Prisma.CustomerContactUpdateManyMutationInput, Prisma.CustomerContactUncheckedUpdateManyInput>
  /**
   * Filter which CustomerContacts to update
   */
  where?: Prisma.CustomerContactWhereInput
  /**
   * Limit how many CustomerContacts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerContactIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CustomerContact upsert
 */
export type CustomerContactUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerContact
   */
  select?: Prisma.CustomerContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerContact
   */
  omit?: Prisma.CustomerContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerContactInclude<ExtArgs> | null
  /**
   * The filter to search for the CustomerContact to update in case it exists.
   */
  where: Prisma.CustomerContactWhereUniqueInput
  /**
   * In case the CustomerContact found by the `where` argument doesn't exist, create a new CustomerContact with this data.
   */
  create: Prisma.XOR<Prisma.CustomerContactCreateInput, Prisma.CustomerContactUncheckedCreateInput>
  /**
   * In case the CustomerContact was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CustomerContactUpdateInput, Prisma.CustomerContactUncheckedUpdateInput>
}

/**
 * CustomerContact delete
 */
export type CustomerContactDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerContact
   */
  select?: Prisma.CustomerContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerContact
   */
  omit?: Prisma.CustomerContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerContactInclude<ExtArgs> | null
  /**
   * Filter which CustomerContact to delete.
   */
  where: Prisma.CustomerContactWhereUniqueInput
}

/**
 * CustomerContact deleteMany
 */
export type CustomerContactDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CustomerContacts to delete
   */
  where?: Prisma.CustomerContactWhereInput
  /**
   * Limit how many CustomerContacts to delete.
   */
  limit?: number
}

/**
 * CustomerContact without action
 */
export type CustomerContactDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CustomerContact
   */
  select?: Prisma.CustomerContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CustomerContact
   */
  omit?: Prisma.CustomerContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerContactInclude<ExtArgs> | null
}
