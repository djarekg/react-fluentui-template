
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProductSale` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ProductSale
 * 
 */
export type ProductSaleModel = runtime.Types.Result.DefaultSelection<Prisma.$ProductSalePayload>

export type AggregateProductSale = {
  _count: ProductSaleCountAggregateOutputType | null
  _avg: ProductSaleAvgAggregateOutputType | null
  _sum: ProductSaleSumAggregateOutputType | null
  _min: ProductSaleMinAggregateOutputType | null
  _max: ProductSaleMaxAggregateOutputType | null
}

export type ProductSaleAvgAggregateOutputType = {
  quantity: number | null
  price: runtime.Decimal | null
}

export type ProductSaleSumAggregateOutputType = {
  quantity: number | null
  price: runtime.Decimal | null
}

export type ProductSaleMinAggregateOutputType = {
  id: string | null
  productId: string | null
  customerId: string | null
  userId: string | null
  quantity: number | null
  price: runtime.Decimal | null
  dateCreated: Date | null
  dateUpdated: Date | null
}

export type ProductSaleMaxAggregateOutputType = {
  id: string | null
  productId: string | null
  customerId: string | null
  userId: string | null
  quantity: number | null
  price: runtime.Decimal | null
  dateCreated: Date | null
  dateUpdated: Date | null
}

export type ProductSaleCountAggregateOutputType = {
  id: number
  productId: number
  customerId: number
  userId: number
  quantity: number
  price: number
  dateCreated: number
  dateUpdated: number
  _all: number
}


export type ProductSaleAvgAggregateInputType = {
  quantity?: true
  price?: true
}

export type ProductSaleSumAggregateInputType = {
  quantity?: true
  price?: true
}

export type ProductSaleMinAggregateInputType = {
  id?: true
  productId?: true
  customerId?: true
  userId?: true
  quantity?: true
  price?: true
  dateCreated?: true
  dateUpdated?: true
}

export type ProductSaleMaxAggregateInputType = {
  id?: true
  productId?: true
  customerId?: true
  userId?: true
  quantity?: true
  price?: true
  dateCreated?: true
  dateUpdated?: true
}

export type ProductSaleCountAggregateInputType = {
  id?: true
  productId?: true
  customerId?: true
  userId?: true
  quantity?: true
  price?: true
  dateCreated?: true
  dateUpdated?: true
  _all?: true
}

export type ProductSaleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductSale to aggregate.
   */
  where?: Prisma.ProductSaleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductSales to fetch.
   */
  orderBy?: Prisma.ProductSaleOrderByWithRelationInput | Prisma.ProductSaleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProductSaleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductSales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductSales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProductSales
  **/
  _count?: true | ProductSaleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductSaleAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductSaleSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductSaleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductSaleMaxAggregateInputType
}

export type GetProductSaleAggregateType<T extends ProductSaleAggregateArgs> = {
      [P in keyof T & keyof AggregateProductSale]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProductSale[P]>
    : Prisma.GetScalarType<T[P], AggregateProductSale[P]>
}




export type ProductSaleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductSaleWhereInput
  orderBy?: Prisma.ProductSaleOrderByWithAggregationInput | Prisma.ProductSaleOrderByWithAggregationInput[]
  by: Prisma.ProductSaleScalarFieldEnum[] | Prisma.ProductSaleScalarFieldEnum
  having?: Prisma.ProductSaleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductSaleCountAggregateInputType | true
  _avg?: ProductSaleAvgAggregateInputType
  _sum?: ProductSaleSumAggregateInputType
  _min?: ProductSaleMinAggregateInputType
  _max?: ProductSaleMaxAggregateInputType
}

export type ProductSaleGroupByOutputType = {
  id: string
  productId: string
  customerId: string
  userId: string
  quantity: number
  price: runtime.Decimal
  dateCreated: Date
  dateUpdated: Date
  _count: ProductSaleCountAggregateOutputType | null
  _avg: ProductSaleAvgAggregateOutputType | null
  _sum: ProductSaleSumAggregateOutputType | null
  _min: ProductSaleMinAggregateOutputType | null
  _max: ProductSaleMaxAggregateOutputType | null
}

type GetProductSaleGroupByPayload<T extends ProductSaleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductSaleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductSaleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductSaleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductSaleGroupByOutputType[P]>
      }
    >
  >



export type ProductSaleWhereInput = {
  AND?: Prisma.ProductSaleWhereInput | Prisma.ProductSaleWhereInput[]
  OR?: Prisma.ProductSaleWhereInput[]
  NOT?: Prisma.ProductSaleWhereInput | Prisma.ProductSaleWhereInput[]
  id?: Prisma.StringFilter<"ProductSale"> | string
  productId?: Prisma.StringFilter<"ProductSale"> | string
  customerId?: Prisma.StringFilter<"ProductSale"> | string
  userId?: Prisma.StringFilter<"ProductSale"> | string
  quantity?: Prisma.IntFilter<"ProductSale"> | number
  price?: Prisma.DecimalFilter<"ProductSale"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFilter<"ProductSale"> | Date | string
  dateUpdated?: Prisma.DateTimeFilter<"ProductSale"> | Date | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
  customer?: Prisma.XOR<Prisma.CustomerScalarRelationFilter, Prisma.CustomerWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ProductSaleOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  price?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
  product?: Prisma.ProductOrderByWithRelationInput
  customer?: Prisma.CustomerOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
  _relevance?: Prisma.ProductSaleOrderByRelevanceInput
}

export type ProductSaleWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProductSaleWhereInput | Prisma.ProductSaleWhereInput[]
  OR?: Prisma.ProductSaleWhereInput[]
  NOT?: Prisma.ProductSaleWhereInput | Prisma.ProductSaleWhereInput[]
  productId?: Prisma.StringFilter<"ProductSale"> | string
  customerId?: Prisma.StringFilter<"ProductSale"> | string
  userId?: Prisma.StringFilter<"ProductSale"> | string
  quantity?: Prisma.IntFilter<"ProductSale"> | number
  price?: Prisma.DecimalFilter<"ProductSale"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFilter<"ProductSale"> | Date | string
  dateUpdated?: Prisma.DateTimeFilter<"ProductSale"> | Date | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
  customer?: Prisma.XOR<Prisma.CustomerScalarRelationFilter, Prisma.CustomerWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type ProductSaleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  price?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
  _count?: Prisma.ProductSaleCountOrderByAggregateInput
  _avg?: Prisma.ProductSaleAvgOrderByAggregateInput
  _max?: Prisma.ProductSaleMaxOrderByAggregateInput
  _min?: Prisma.ProductSaleMinOrderByAggregateInput
  _sum?: Prisma.ProductSaleSumOrderByAggregateInput
}

export type ProductSaleScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProductSaleScalarWhereWithAggregatesInput | Prisma.ProductSaleScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProductSaleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProductSaleScalarWhereWithAggregatesInput | Prisma.ProductSaleScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProductSale"> | string
  productId?: Prisma.StringWithAggregatesFilter<"ProductSale"> | string
  customerId?: Prisma.StringWithAggregatesFilter<"ProductSale"> | string
  userId?: Prisma.StringWithAggregatesFilter<"ProductSale"> | string
  quantity?: Prisma.IntWithAggregatesFilter<"ProductSale"> | number
  price?: Prisma.DecimalWithAggregatesFilter<"ProductSale"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeWithAggregatesFilter<"ProductSale"> | Date | string
  dateUpdated?: Prisma.DateTimeWithAggregatesFilter<"ProductSale"> | Date | string
}

export type ProductSaleCreateInput = {
  id?: string
  quantity: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Date | string
  dateUpdated?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutProductSalesInput
  customer: Prisma.CustomerCreateNestedOneWithoutProductSalesInput
  user: Prisma.UserCreateNestedOneWithoutProductSalesInput
}

export type ProductSaleUncheckedCreateInput = {
  id?: string
  productId: string
  customerId: string
  userId: string
  quantity: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductSaleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutProductSalesNestedInput
  customer?: Prisma.CustomerUpdateOneRequiredWithoutProductSalesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutProductSalesNestedInput
}

export type ProductSaleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  customerId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductSaleCreateManyInput = {
  id?: string
  productId: string
  customerId: string
  userId: string
  quantity: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductSaleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductSaleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  customerId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductSaleListRelationFilter = {
  every?: Prisma.ProductSaleWhereInput
  some?: Prisma.ProductSaleWhereInput
  none?: Prisma.ProductSaleWhereInput
}

export type ProductSaleOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProductSaleOrderByRelevanceInput = {
  fields: Prisma.ProductSaleOrderByRelevanceFieldEnum | Prisma.ProductSaleOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ProductSaleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  price?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
}

export type ProductSaleAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
  price?: Prisma.SortOrder
}

export type ProductSaleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  price?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
}

export type ProductSaleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  customerId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  price?: Prisma.SortOrder
  dateCreated?: Prisma.SortOrder
  dateUpdated?: Prisma.SortOrder
}

export type ProductSaleSumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
  price?: Prisma.SortOrder
}

export type ProductSaleCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProductSaleCreateWithoutUserInput, Prisma.ProductSaleUncheckedCreateWithoutUserInput> | Prisma.ProductSaleCreateWithoutUserInput[] | Prisma.ProductSaleUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProductSaleCreateOrConnectWithoutUserInput | Prisma.ProductSaleCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProductSaleCreateManyUserInputEnvelope
  connect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
}

export type ProductSaleUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProductSaleCreateWithoutUserInput, Prisma.ProductSaleUncheckedCreateWithoutUserInput> | Prisma.ProductSaleCreateWithoutUserInput[] | Prisma.ProductSaleUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProductSaleCreateOrConnectWithoutUserInput | Prisma.ProductSaleCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProductSaleCreateManyUserInputEnvelope
  connect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
}

export type ProductSaleUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProductSaleCreateWithoutUserInput, Prisma.ProductSaleUncheckedCreateWithoutUserInput> | Prisma.ProductSaleCreateWithoutUserInput[] | Prisma.ProductSaleUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProductSaleCreateOrConnectWithoutUserInput | Prisma.ProductSaleCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProductSaleUpsertWithWhereUniqueWithoutUserInput | Prisma.ProductSaleUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProductSaleCreateManyUserInputEnvelope
  set?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  disconnect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  delete?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  connect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  update?: Prisma.ProductSaleUpdateWithWhereUniqueWithoutUserInput | Prisma.ProductSaleUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProductSaleUpdateManyWithWhereWithoutUserInput | Prisma.ProductSaleUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProductSaleScalarWhereInput | Prisma.ProductSaleScalarWhereInput[]
}

export type ProductSaleUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProductSaleCreateWithoutUserInput, Prisma.ProductSaleUncheckedCreateWithoutUserInput> | Prisma.ProductSaleCreateWithoutUserInput[] | Prisma.ProductSaleUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProductSaleCreateOrConnectWithoutUserInput | Prisma.ProductSaleCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProductSaleUpsertWithWhereUniqueWithoutUserInput | Prisma.ProductSaleUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProductSaleCreateManyUserInputEnvelope
  set?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  disconnect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  delete?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  connect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  update?: Prisma.ProductSaleUpdateWithWhereUniqueWithoutUserInput | Prisma.ProductSaleUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProductSaleUpdateManyWithWhereWithoutUserInput | Prisma.ProductSaleUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProductSaleScalarWhereInput | Prisma.ProductSaleScalarWhereInput[]
}

export type ProductSaleCreateNestedManyWithoutCustomerInput = {
  create?: Prisma.XOR<Prisma.ProductSaleCreateWithoutCustomerInput, Prisma.ProductSaleUncheckedCreateWithoutCustomerInput> | Prisma.ProductSaleCreateWithoutCustomerInput[] | Prisma.ProductSaleUncheckedCreateWithoutCustomerInput[]
  connectOrCreate?: Prisma.ProductSaleCreateOrConnectWithoutCustomerInput | Prisma.ProductSaleCreateOrConnectWithoutCustomerInput[]
  createMany?: Prisma.ProductSaleCreateManyCustomerInputEnvelope
  connect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
}

export type ProductSaleUncheckedCreateNestedManyWithoutCustomerInput = {
  create?: Prisma.XOR<Prisma.ProductSaleCreateWithoutCustomerInput, Prisma.ProductSaleUncheckedCreateWithoutCustomerInput> | Prisma.ProductSaleCreateWithoutCustomerInput[] | Prisma.ProductSaleUncheckedCreateWithoutCustomerInput[]
  connectOrCreate?: Prisma.ProductSaleCreateOrConnectWithoutCustomerInput | Prisma.ProductSaleCreateOrConnectWithoutCustomerInput[]
  createMany?: Prisma.ProductSaleCreateManyCustomerInputEnvelope
  connect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
}

export type ProductSaleUpdateManyWithoutCustomerNestedInput = {
  create?: Prisma.XOR<Prisma.ProductSaleCreateWithoutCustomerInput, Prisma.ProductSaleUncheckedCreateWithoutCustomerInput> | Prisma.ProductSaleCreateWithoutCustomerInput[] | Prisma.ProductSaleUncheckedCreateWithoutCustomerInput[]
  connectOrCreate?: Prisma.ProductSaleCreateOrConnectWithoutCustomerInput | Prisma.ProductSaleCreateOrConnectWithoutCustomerInput[]
  upsert?: Prisma.ProductSaleUpsertWithWhereUniqueWithoutCustomerInput | Prisma.ProductSaleUpsertWithWhereUniqueWithoutCustomerInput[]
  createMany?: Prisma.ProductSaleCreateManyCustomerInputEnvelope
  set?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  disconnect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  delete?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  connect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  update?: Prisma.ProductSaleUpdateWithWhereUniqueWithoutCustomerInput | Prisma.ProductSaleUpdateWithWhereUniqueWithoutCustomerInput[]
  updateMany?: Prisma.ProductSaleUpdateManyWithWhereWithoutCustomerInput | Prisma.ProductSaleUpdateManyWithWhereWithoutCustomerInput[]
  deleteMany?: Prisma.ProductSaleScalarWhereInput | Prisma.ProductSaleScalarWhereInput[]
}

export type ProductSaleUncheckedUpdateManyWithoutCustomerNestedInput = {
  create?: Prisma.XOR<Prisma.ProductSaleCreateWithoutCustomerInput, Prisma.ProductSaleUncheckedCreateWithoutCustomerInput> | Prisma.ProductSaleCreateWithoutCustomerInput[] | Prisma.ProductSaleUncheckedCreateWithoutCustomerInput[]
  connectOrCreate?: Prisma.ProductSaleCreateOrConnectWithoutCustomerInput | Prisma.ProductSaleCreateOrConnectWithoutCustomerInput[]
  upsert?: Prisma.ProductSaleUpsertWithWhereUniqueWithoutCustomerInput | Prisma.ProductSaleUpsertWithWhereUniqueWithoutCustomerInput[]
  createMany?: Prisma.ProductSaleCreateManyCustomerInputEnvelope
  set?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  disconnect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  delete?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  connect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  update?: Prisma.ProductSaleUpdateWithWhereUniqueWithoutCustomerInput | Prisma.ProductSaleUpdateWithWhereUniqueWithoutCustomerInput[]
  updateMany?: Prisma.ProductSaleUpdateManyWithWhereWithoutCustomerInput | Prisma.ProductSaleUpdateManyWithWhereWithoutCustomerInput[]
  deleteMany?: Prisma.ProductSaleScalarWhereInput | Prisma.ProductSaleScalarWhereInput[]
}

export type ProductSaleCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductSaleCreateWithoutProductInput, Prisma.ProductSaleUncheckedCreateWithoutProductInput> | Prisma.ProductSaleCreateWithoutProductInput[] | Prisma.ProductSaleUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductSaleCreateOrConnectWithoutProductInput | Prisma.ProductSaleCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductSaleCreateManyProductInputEnvelope
  connect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
}

export type ProductSaleUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductSaleCreateWithoutProductInput, Prisma.ProductSaleUncheckedCreateWithoutProductInput> | Prisma.ProductSaleCreateWithoutProductInput[] | Prisma.ProductSaleUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductSaleCreateOrConnectWithoutProductInput | Prisma.ProductSaleCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductSaleCreateManyProductInputEnvelope
  connect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
}

export type ProductSaleUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductSaleCreateWithoutProductInput, Prisma.ProductSaleUncheckedCreateWithoutProductInput> | Prisma.ProductSaleCreateWithoutProductInput[] | Prisma.ProductSaleUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductSaleCreateOrConnectWithoutProductInput | Prisma.ProductSaleCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductSaleUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductSaleUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductSaleCreateManyProductInputEnvelope
  set?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  disconnect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  delete?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  connect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  update?: Prisma.ProductSaleUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductSaleUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductSaleUpdateManyWithWhereWithoutProductInput | Prisma.ProductSaleUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductSaleScalarWhereInput | Prisma.ProductSaleScalarWhereInput[]
}

export type ProductSaleUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductSaleCreateWithoutProductInput, Prisma.ProductSaleUncheckedCreateWithoutProductInput> | Prisma.ProductSaleCreateWithoutProductInput[] | Prisma.ProductSaleUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductSaleCreateOrConnectWithoutProductInput | Prisma.ProductSaleCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductSaleUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductSaleUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductSaleCreateManyProductInputEnvelope
  set?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  disconnect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  delete?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  connect?: Prisma.ProductSaleWhereUniqueInput | Prisma.ProductSaleWhereUniqueInput[]
  update?: Prisma.ProductSaleUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductSaleUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductSaleUpdateManyWithWhereWithoutProductInput | Prisma.ProductSaleUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductSaleScalarWhereInput | Prisma.ProductSaleScalarWhereInput[]
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type ProductSaleCreateWithoutUserInput = {
  id?: string
  quantity: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Date | string
  dateUpdated?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutProductSalesInput
  customer: Prisma.CustomerCreateNestedOneWithoutProductSalesInput
}

export type ProductSaleUncheckedCreateWithoutUserInput = {
  id?: string
  productId: string
  customerId: string
  quantity: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductSaleCreateOrConnectWithoutUserInput = {
  where: Prisma.ProductSaleWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductSaleCreateWithoutUserInput, Prisma.ProductSaleUncheckedCreateWithoutUserInput>
}

export type ProductSaleCreateManyUserInputEnvelope = {
  data: Prisma.ProductSaleCreateManyUserInput | Prisma.ProductSaleCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ProductSaleUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProductSaleWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductSaleUpdateWithoutUserInput, Prisma.ProductSaleUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ProductSaleCreateWithoutUserInput, Prisma.ProductSaleUncheckedCreateWithoutUserInput>
}

export type ProductSaleUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProductSaleWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductSaleUpdateWithoutUserInput, Prisma.ProductSaleUncheckedUpdateWithoutUserInput>
}

export type ProductSaleUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ProductSaleScalarWhereInput
  data: Prisma.XOR<Prisma.ProductSaleUpdateManyMutationInput, Prisma.ProductSaleUncheckedUpdateManyWithoutUserInput>
}

export type ProductSaleScalarWhereInput = {
  AND?: Prisma.ProductSaleScalarWhereInput | Prisma.ProductSaleScalarWhereInput[]
  OR?: Prisma.ProductSaleScalarWhereInput[]
  NOT?: Prisma.ProductSaleScalarWhereInput | Prisma.ProductSaleScalarWhereInput[]
  id?: Prisma.StringFilter<"ProductSale"> | string
  productId?: Prisma.StringFilter<"ProductSale"> | string
  customerId?: Prisma.StringFilter<"ProductSale"> | string
  userId?: Prisma.StringFilter<"ProductSale"> | string
  quantity?: Prisma.IntFilter<"ProductSale"> | number
  price?: Prisma.DecimalFilter<"ProductSale"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFilter<"ProductSale"> | Date | string
  dateUpdated?: Prisma.DateTimeFilter<"ProductSale"> | Date | string
}

export type ProductSaleCreateWithoutCustomerInput = {
  id?: string
  quantity: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Date | string
  dateUpdated?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutProductSalesInput
  user: Prisma.UserCreateNestedOneWithoutProductSalesInput
}

export type ProductSaleUncheckedCreateWithoutCustomerInput = {
  id?: string
  productId: string
  userId: string
  quantity: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductSaleCreateOrConnectWithoutCustomerInput = {
  where: Prisma.ProductSaleWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductSaleCreateWithoutCustomerInput, Prisma.ProductSaleUncheckedCreateWithoutCustomerInput>
}

export type ProductSaleCreateManyCustomerInputEnvelope = {
  data: Prisma.ProductSaleCreateManyCustomerInput | Prisma.ProductSaleCreateManyCustomerInput[]
  skipDuplicates?: boolean
}

export type ProductSaleUpsertWithWhereUniqueWithoutCustomerInput = {
  where: Prisma.ProductSaleWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductSaleUpdateWithoutCustomerInput, Prisma.ProductSaleUncheckedUpdateWithoutCustomerInput>
  create: Prisma.XOR<Prisma.ProductSaleCreateWithoutCustomerInput, Prisma.ProductSaleUncheckedCreateWithoutCustomerInput>
}

export type ProductSaleUpdateWithWhereUniqueWithoutCustomerInput = {
  where: Prisma.ProductSaleWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductSaleUpdateWithoutCustomerInput, Prisma.ProductSaleUncheckedUpdateWithoutCustomerInput>
}

export type ProductSaleUpdateManyWithWhereWithoutCustomerInput = {
  where: Prisma.ProductSaleScalarWhereInput
  data: Prisma.XOR<Prisma.ProductSaleUpdateManyMutationInput, Prisma.ProductSaleUncheckedUpdateManyWithoutCustomerInput>
}

export type ProductSaleCreateWithoutProductInput = {
  id?: string
  quantity: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Date | string
  dateUpdated?: Date | string
  customer: Prisma.CustomerCreateNestedOneWithoutProductSalesInput
  user: Prisma.UserCreateNestedOneWithoutProductSalesInput
}

export type ProductSaleUncheckedCreateWithoutProductInput = {
  id?: string
  customerId: string
  userId: string
  quantity: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductSaleCreateOrConnectWithoutProductInput = {
  where: Prisma.ProductSaleWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductSaleCreateWithoutProductInput, Prisma.ProductSaleUncheckedCreateWithoutProductInput>
}

export type ProductSaleCreateManyProductInputEnvelope = {
  data: Prisma.ProductSaleCreateManyProductInput | Prisma.ProductSaleCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type ProductSaleUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductSaleWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductSaleUpdateWithoutProductInput, Prisma.ProductSaleUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.ProductSaleCreateWithoutProductInput, Prisma.ProductSaleUncheckedCreateWithoutProductInput>
}

export type ProductSaleUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductSaleWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductSaleUpdateWithoutProductInput, Prisma.ProductSaleUncheckedUpdateWithoutProductInput>
}

export type ProductSaleUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.ProductSaleScalarWhereInput
  data: Prisma.XOR<Prisma.ProductSaleUpdateManyMutationInput, Prisma.ProductSaleUncheckedUpdateManyWithoutProductInput>
}

export type ProductSaleCreateManyUserInput = {
  id?: string
  productId: string
  customerId: string
  quantity: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductSaleUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutProductSalesNestedInput
  customer?: Prisma.CustomerUpdateOneRequiredWithoutProductSalesNestedInput
}

export type ProductSaleUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  customerId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductSaleUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  customerId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductSaleCreateManyCustomerInput = {
  id?: string
  productId: string
  userId: string
  quantity: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductSaleUpdateWithoutCustomerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutProductSalesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutProductSalesNestedInput
}

export type ProductSaleUncheckedUpdateWithoutCustomerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductSaleUncheckedUpdateManyWithoutCustomerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductSaleCreateManyProductInput = {
  id?: string
  customerId: string
  userId: string
  quantity: number
  price: runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Date | string
  dateUpdated?: Date | string
}

export type ProductSaleUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  customer?: Prisma.CustomerUpdateOneRequiredWithoutProductSalesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutProductSalesNestedInput
}

export type ProductSaleUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  customerId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductSaleUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  customerId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  dateCreated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dateUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProductSaleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  customerId?: boolean
  userId?: boolean
  quantity?: boolean
  price?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productSale"]>

export type ProductSaleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  customerId?: boolean
  userId?: boolean
  quantity?: boolean
  price?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productSale"]>

export type ProductSaleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  customerId?: boolean
  userId?: boolean
  quantity?: boolean
  price?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productSale"]>

export type ProductSaleSelectScalar = {
  id?: boolean
  productId?: boolean
  customerId?: boolean
  userId?: boolean
  quantity?: boolean
  price?: boolean
  dateCreated?: boolean
  dateUpdated?: boolean
}

export type ProductSaleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId" | "customerId" | "userId" | "quantity" | "price" | "dateCreated" | "dateUpdated", ExtArgs["result"]["productSale"]>
export type ProductSaleInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ProductSaleIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ProductSaleIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  customer?: boolean | Prisma.CustomerDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ProductSalePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProductSale"
  objects: {
    product: Prisma.$ProductPayload<ExtArgs>
    customer: Prisma.$CustomerPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    productId: string
    customerId: string
    userId: string
    quantity: number
    price: runtime.Decimal
    dateCreated: Date
    dateUpdated: Date
  }, ExtArgs["result"]["productSale"]>
  composites: {}
}

export type ProductSaleGetPayload<S extends boolean | null | undefined | ProductSaleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProductSalePayload, S>

export type ProductSaleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProductSaleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductSaleCountAggregateInputType | true
  }

export interface ProductSaleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductSale'], meta: { name: 'ProductSale' } }
  /**
   * Find zero or one ProductSale that matches the filter.
   * @param {ProductSaleFindUniqueArgs} args - Arguments to find a ProductSale
   * @example
   * // Get one ProductSale
   * const productSale = await prisma.productSale.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProductSaleFindUniqueArgs>(args: Prisma.SelectSubset<T, ProductSaleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProductSaleClient<runtime.Types.Result.GetResult<Prisma.$ProductSalePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProductSale that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProductSaleFindUniqueOrThrowArgs} args - Arguments to find a ProductSale
   * @example
   * // Get one ProductSale
   * const productSale = await prisma.productSale.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProductSaleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProductSaleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductSaleClient<runtime.Types.Result.GetResult<Prisma.$ProductSalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductSale that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductSaleFindFirstArgs} args - Arguments to find a ProductSale
   * @example
   * // Get one ProductSale
   * const productSale = await prisma.productSale.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProductSaleFindFirstArgs>(args?: Prisma.SelectSubset<T, ProductSaleFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProductSaleClient<runtime.Types.Result.GetResult<Prisma.$ProductSalePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductSale that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductSaleFindFirstOrThrowArgs} args - Arguments to find a ProductSale
   * @example
   * // Get one ProductSale
   * const productSale = await prisma.productSale.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProductSaleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProductSaleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductSaleClient<runtime.Types.Result.GetResult<Prisma.$ProductSalePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProductSales that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductSaleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProductSales
   * const productSales = await prisma.productSale.findMany()
   * 
   * // Get first 10 ProductSales
   * const productSales = await prisma.productSale.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productSaleWithIdOnly = await prisma.productSale.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProductSaleFindManyArgs>(args?: Prisma.SelectSubset<T, ProductSaleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductSalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProductSale.
   * @param {ProductSaleCreateArgs} args - Arguments to create a ProductSale.
   * @example
   * // Create one ProductSale
   * const ProductSale = await prisma.productSale.create({
   *   data: {
   *     // ... data to create a ProductSale
   *   }
   * })
   * 
   */
  create<T extends ProductSaleCreateArgs>(args: Prisma.SelectSubset<T, ProductSaleCreateArgs<ExtArgs>>): Prisma.Prisma__ProductSaleClient<runtime.Types.Result.GetResult<Prisma.$ProductSalePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProductSales.
   * @param {ProductSaleCreateManyArgs} args - Arguments to create many ProductSales.
   * @example
   * // Create many ProductSales
   * const productSale = await prisma.productSale.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProductSaleCreateManyArgs>(args?: Prisma.SelectSubset<T, ProductSaleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProductSales and returns the data saved in the database.
   * @param {ProductSaleCreateManyAndReturnArgs} args - Arguments to create many ProductSales.
   * @example
   * // Create many ProductSales
   * const productSale = await prisma.productSale.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProductSales and only return the `id`
   * const productSaleWithIdOnly = await prisma.productSale.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProductSaleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProductSaleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductSalePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProductSale.
   * @param {ProductSaleDeleteArgs} args - Arguments to delete one ProductSale.
   * @example
   * // Delete one ProductSale
   * const ProductSale = await prisma.productSale.delete({
   *   where: {
   *     // ... filter to delete one ProductSale
   *   }
   * })
   * 
   */
  delete<T extends ProductSaleDeleteArgs>(args: Prisma.SelectSubset<T, ProductSaleDeleteArgs<ExtArgs>>): Prisma.Prisma__ProductSaleClient<runtime.Types.Result.GetResult<Prisma.$ProductSalePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProductSale.
   * @param {ProductSaleUpdateArgs} args - Arguments to update one ProductSale.
   * @example
   * // Update one ProductSale
   * const productSale = await prisma.productSale.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProductSaleUpdateArgs>(args: Prisma.SelectSubset<T, ProductSaleUpdateArgs<ExtArgs>>): Prisma.Prisma__ProductSaleClient<runtime.Types.Result.GetResult<Prisma.$ProductSalePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProductSales.
   * @param {ProductSaleDeleteManyArgs} args - Arguments to filter ProductSales to delete.
   * @example
   * // Delete a few ProductSales
   * const { count } = await prisma.productSale.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProductSaleDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProductSaleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductSales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductSaleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProductSales
   * const productSale = await prisma.productSale.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProductSaleUpdateManyArgs>(args: Prisma.SelectSubset<T, ProductSaleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductSales and returns the data updated in the database.
   * @param {ProductSaleUpdateManyAndReturnArgs} args - Arguments to update many ProductSales.
   * @example
   * // Update many ProductSales
   * const productSale = await prisma.productSale.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProductSales and only return the `id`
   * const productSaleWithIdOnly = await prisma.productSale.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProductSaleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProductSaleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductSalePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProductSale.
   * @param {ProductSaleUpsertArgs} args - Arguments to update or create a ProductSale.
   * @example
   * // Update or create a ProductSale
   * const productSale = await prisma.productSale.upsert({
   *   create: {
   *     // ... data to create a ProductSale
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProductSale we want to update
   *   }
   * })
   */
  upsert<T extends ProductSaleUpsertArgs>(args: Prisma.SelectSubset<T, ProductSaleUpsertArgs<ExtArgs>>): Prisma.Prisma__ProductSaleClient<runtime.Types.Result.GetResult<Prisma.$ProductSalePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProductSales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductSaleCountArgs} args - Arguments to filter ProductSales to count.
   * @example
   * // Count the number of ProductSales
   * const count = await prisma.productSale.count({
   *   where: {
   *     // ... the filter for the ProductSales we want to count
   *   }
   * })
  **/
  count<T extends ProductSaleCountArgs>(
    args?: Prisma.Subset<T, ProductSaleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductSaleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProductSale.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductSaleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductSaleAggregateArgs>(args: Prisma.Subset<T, ProductSaleAggregateArgs>): Prisma.PrismaPromise<GetProductSaleAggregateType<T>>

  /**
   * Group by ProductSale.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductSaleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProductSaleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProductSaleGroupByArgs['orderBy'] }
      : { orderBy?: ProductSaleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProductSaleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductSaleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProductSale model
 */
readonly fields: ProductSaleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProductSale.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProductSaleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  customer<T extends Prisma.CustomerDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CustomerDefaultArgs<ExtArgs>>): Prisma.Prisma__CustomerClient<runtime.Types.Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProductSale model
 */
export interface ProductSaleFieldRefs {
  readonly id: Prisma.FieldRef<"ProductSale", 'String'>
  readonly productId: Prisma.FieldRef<"ProductSale", 'String'>
  readonly customerId: Prisma.FieldRef<"ProductSale", 'String'>
  readonly userId: Prisma.FieldRef<"ProductSale", 'String'>
  readonly quantity: Prisma.FieldRef<"ProductSale", 'Int'>
  readonly price: Prisma.FieldRef<"ProductSale", 'Decimal'>
  readonly dateCreated: Prisma.FieldRef<"ProductSale", 'DateTime'>
  readonly dateUpdated: Prisma.FieldRef<"ProductSale", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProductSale findUnique
 */
export type ProductSaleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSale
   */
  select?: Prisma.ProductSaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSale
   */
  omit?: Prisma.ProductSaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSaleInclude<ExtArgs> | null
  /**
   * Filter, which ProductSale to fetch.
   */
  where: Prisma.ProductSaleWhereUniqueInput
}

/**
 * ProductSale findUniqueOrThrow
 */
export type ProductSaleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSale
   */
  select?: Prisma.ProductSaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSale
   */
  omit?: Prisma.ProductSaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSaleInclude<ExtArgs> | null
  /**
   * Filter, which ProductSale to fetch.
   */
  where: Prisma.ProductSaleWhereUniqueInput
}

/**
 * ProductSale findFirst
 */
export type ProductSaleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSale
   */
  select?: Prisma.ProductSaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSale
   */
  omit?: Prisma.ProductSaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSaleInclude<ExtArgs> | null
  /**
   * Filter, which ProductSale to fetch.
   */
  where?: Prisma.ProductSaleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductSales to fetch.
   */
  orderBy?: Prisma.ProductSaleOrderByWithRelationInput | Prisma.ProductSaleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductSales.
   */
  cursor?: Prisma.ProductSaleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductSales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductSales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductSales.
   */
  distinct?: Prisma.ProductSaleScalarFieldEnum | Prisma.ProductSaleScalarFieldEnum[]
}

/**
 * ProductSale findFirstOrThrow
 */
export type ProductSaleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSale
   */
  select?: Prisma.ProductSaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSale
   */
  omit?: Prisma.ProductSaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSaleInclude<ExtArgs> | null
  /**
   * Filter, which ProductSale to fetch.
   */
  where?: Prisma.ProductSaleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductSales to fetch.
   */
  orderBy?: Prisma.ProductSaleOrderByWithRelationInput | Prisma.ProductSaleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductSales.
   */
  cursor?: Prisma.ProductSaleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductSales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductSales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductSales.
   */
  distinct?: Prisma.ProductSaleScalarFieldEnum | Prisma.ProductSaleScalarFieldEnum[]
}

/**
 * ProductSale findMany
 */
export type ProductSaleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSale
   */
  select?: Prisma.ProductSaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSale
   */
  omit?: Prisma.ProductSaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSaleInclude<ExtArgs> | null
  /**
   * Filter, which ProductSales to fetch.
   */
  where?: Prisma.ProductSaleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductSales to fetch.
   */
  orderBy?: Prisma.ProductSaleOrderByWithRelationInput | Prisma.ProductSaleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProductSales.
   */
  cursor?: Prisma.ProductSaleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductSales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductSales.
   */
  skip?: number
  distinct?: Prisma.ProductSaleScalarFieldEnum | Prisma.ProductSaleScalarFieldEnum[]
}

/**
 * ProductSale create
 */
export type ProductSaleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSale
   */
  select?: Prisma.ProductSaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSale
   */
  omit?: Prisma.ProductSaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSaleInclude<ExtArgs> | null
  /**
   * The data needed to create a ProductSale.
   */
  data: Prisma.XOR<Prisma.ProductSaleCreateInput, Prisma.ProductSaleUncheckedCreateInput>
}

/**
 * ProductSale createMany
 */
export type ProductSaleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProductSales.
   */
  data: Prisma.ProductSaleCreateManyInput | Prisma.ProductSaleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProductSale createManyAndReturn
 */
export type ProductSaleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSale
   */
  select?: Prisma.ProductSaleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSale
   */
  omit?: Prisma.ProductSaleOmit<ExtArgs> | null
  /**
   * The data used to create many ProductSales.
   */
  data: Prisma.ProductSaleCreateManyInput | Prisma.ProductSaleCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSaleIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProductSale update
 */
export type ProductSaleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSale
   */
  select?: Prisma.ProductSaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSale
   */
  omit?: Prisma.ProductSaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSaleInclude<ExtArgs> | null
  /**
   * The data needed to update a ProductSale.
   */
  data: Prisma.XOR<Prisma.ProductSaleUpdateInput, Prisma.ProductSaleUncheckedUpdateInput>
  /**
   * Choose, which ProductSale to update.
   */
  where: Prisma.ProductSaleWhereUniqueInput
}

/**
 * ProductSale updateMany
 */
export type ProductSaleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProductSales.
   */
  data: Prisma.XOR<Prisma.ProductSaleUpdateManyMutationInput, Prisma.ProductSaleUncheckedUpdateManyInput>
  /**
   * Filter which ProductSales to update
   */
  where?: Prisma.ProductSaleWhereInput
  /**
   * Limit how many ProductSales to update.
   */
  limit?: number
}

/**
 * ProductSale updateManyAndReturn
 */
export type ProductSaleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSale
   */
  select?: Prisma.ProductSaleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSale
   */
  omit?: Prisma.ProductSaleOmit<ExtArgs> | null
  /**
   * The data used to update ProductSales.
   */
  data: Prisma.XOR<Prisma.ProductSaleUpdateManyMutationInput, Prisma.ProductSaleUncheckedUpdateManyInput>
  /**
   * Filter which ProductSales to update
   */
  where?: Prisma.ProductSaleWhereInput
  /**
   * Limit how many ProductSales to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSaleIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProductSale upsert
 */
export type ProductSaleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSale
   */
  select?: Prisma.ProductSaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSale
   */
  omit?: Prisma.ProductSaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSaleInclude<ExtArgs> | null
  /**
   * The filter to search for the ProductSale to update in case it exists.
   */
  where: Prisma.ProductSaleWhereUniqueInput
  /**
   * In case the ProductSale found by the `where` argument doesn't exist, create a new ProductSale with this data.
   */
  create: Prisma.XOR<Prisma.ProductSaleCreateInput, Prisma.ProductSaleUncheckedCreateInput>
  /**
   * In case the ProductSale was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProductSaleUpdateInput, Prisma.ProductSaleUncheckedUpdateInput>
}

/**
 * ProductSale delete
 */
export type ProductSaleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSale
   */
  select?: Prisma.ProductSaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSale
   */
  omit?: Prisma.ProductSaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSaleInclude<ExtArgs> | null
  /**
   * Filter which ProductSale to delete.
   */
  where: Prisma.ProductSaleWhereUniqueInput
}

/**
 * ProductSale deleteMany
 */
export type ProductSaleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductSales to delete
   */
  where?: Prisma.ProductSaleWhereInput
  /**
   * Limit how many ProductSales to delete.
   */
  limit?: number
}

/**
 * ProductSale without action
 */
export type ProductSaleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSale
   */
  select?: Prisma.ProductSaleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSale
   */
  omit?: Prisma.ProductSaleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSaleInclude<ExtArgs> | null
}
